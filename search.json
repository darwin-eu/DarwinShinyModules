[{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/articles/a01-introduction.html","id":"motivation","dir":"Articles","previous_headings":"","what":"Motivation","title":"Introduction","text":"Shiny apps wonderful way communicate data others. allows interactivity get additional insights data without completely re-running analysis re-generating report. Within OHDSI sphere customary study accompanying shiny app, visualize data. OhdsiShinyModules ShinyAppBuilder developed standardize shiny apps commonly ran analyses, mainly HADES suite. ShinyAppBuilder seems air tight way functions, without much room flexibility. , maintain level standardization provides. offers extreme opposite developing fully customized shiny app . DarwinShinyModules attempts strike middle ground . deals overhead shiny, like namespaces, reactive environments, server execution; provides pre-specified modules rapidly develop functional shiny apps, stays flexible enough include custom additions shiny app.","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/articles/a01-introduction.html","id":"kinds-of-modules","dir":"Articles","previous_headings":"","what":"Kinds of modules","title":"Introduction","text":"idea behind DarwinShinyModules one component can module. component may plot, table, text, etc. kinds modules contain code deal kind data, present output standardized way. instance Table module might show form tabular data like data.frame standardizes way, independent contents data. example can display contents iris mtcars data sets similar fashion:  Notice tables effectively formatted , data contained within different. button download visualized data bottom left, search-able per column, etc. call modules deal directly data like base modules. modules lowest level module building modules shiny apps. modules can directly used form shiny app, module. second kind module DarwinShinyModules composed module. kind module large part server code composed modules. Additional code can make modules can communicate . example, server function uses pre-specified table plot server methods. small amount code added update “size” column data, depending rows selected table, updated plot. plot update updated data.  full underlying code scope vignette, included end vignette completeness supplementary .","code":"library(DarwinShinyModules)  tableIris <- Table$new(iris, title = \"Iris\") tableMtcars <- Table$new(mtcars, title = \"MT Cars\")  preview(list(tableIris, tableMtcars)) server = function(input, output, session) {   # Server method for the `plot`   private$.plot$server(input, output, session)   # Server method for the `table`   private$.table$server(input, output, session)    # Additional code that fetches `rows_selected` from the `table` module, and   # uses it to update the data in the `plot` module   shiny::observeEvent(private$.table$bindings$rows_selected, {     private$.data[, \"size\"] <- 1     private$.data[private$.table$bindings$rows_selected, \"size\"] <- 10     private$.plot$args$data <- private$.data   }) }"},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/articles/a01-introduction.html","id":"module-hierarchy","dir":"Articles","previous_headings":"","what":"Module hierarchy","title":"Introduction","text":"Now know kind modules , can explore hierarchy modules. DarwinShinyModules uses R6 implement module. Even though R functional language inherently support Object Oriented Programming (OOP), style code organisation lends well create shiny modules gives sense “state” within module. “state” can manipulated run time depending user input, changing behavior () modules dynamically. sense “state” also achievable purely functions, functional programming data live either global environment, disk, data needs attached function environment: options seem like round way things, use case. DarwinShinyModules uses inheritance inherit common functionality modules, following “decorator” style design pattern. idea behind inheritance come naturally, (hopefully) intuitively.  top hierarchy ShinyModule class. class deals overhead shiny, like namespaces, reactive environments, server execution. modules DarwinShinyModules inherit module. second layer modules ‘base’ modules described earlier. modules might intermediate parent class. instance PlotStatic, PlotWidget, PlotPlotly inherit Plot class. mostly due specific renderX() XOutput() functions specific kind plot. Finally third layer ‘composed’ modules.","code":"foo <- function(x) {   z <- x    function(y) {     z * y   } }  bar <- foo(2)  bar(3) #> [1] 6"},{"path":[]},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/articles/a01-introduction.html","id":"a-full-code","dir":"Articles","previous_headings":"Suplementals","what":"A: Full code","title":"Introduction","text":"","code":"ExampleModule <- R6::R6Class(   classname = \"ExampleModule\",   inherit = ShinyModule,      active = list(),   public = list(     initialize = function() {       super$initialize()       private$.data <- iris       private$.data$size <- 1       private$.table <- Table$new(private$.data, title = NULL)       private$.table$parentNamespace <- self$namespace              private$.plot <- PlotStatic$new(fun = private$.plotFun, args = list(data = private$.data))       private$.plot$parentNamespace <- self$namespace     }   ),   private = list(     .data = NULL,     .table = NULL,     .plot = NULL,          .UI = function() {       shiny::tagList(         private$.plot$UI(),         private$.table$UI()       )     },          .server = function(input, output, session) {       private$.plot$server(input, output, session)       private$.table$server(input, output, session)        shiny::observeEvent(private$.table$bindings$rows_selected, {         private$.data[, \"size\"] <- 1         private$.data[private$.table$bindings$rows_selected, \"size\"] <- 10         private$.plot$args$data <- private$.data       })     },          .plotFun = function(data) {       ggplot2::ggplot(data = data) +         ggplot2::geom_point(mapping = ggplot2::aes(x = Sepal.Width, y = Sepal.Length, size = size)) +         ggplot2::facet_grid(. ~ Species)     }   ) )  mod <- ExampleModule$new() preview(mod)"},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/articles/a02-using-shiny-modules-in-shiny-app.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Using modules in a shiny app","text":"vignette discuss use various shiny modules shiny app. shiny app exists two components: UI, server:  two components foundation shiny app.","code":"server <- function(input, output, session) {    }  UI <- shiny::fluidPage(    )  if (interactive()) {   shiny::shinyApp(ui = UI, server = server) }"},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/articles/a02-using-shiny-modules-in-shiny-app.html","id":"adding-a-module","dir":"Articles","previous_headings":"","what":"Adding a module","title":"Using modules in a shiny app","text":"Let’s add table containing iris data. First need create Table module: table module R6 class contains various public private fields methods. specific Table module. present DarwinShinyModule modules. modules server() UI() method. methods used make shiny app function, may used shiny::shinyApp(). makes module essentially tiny stand-alone shiny app. integrate module shiny app, add UI() server() method calls shiny app:  arguments customize table, title, options, filter. options filter arguments DT arguments add extra options, control filtering.  Maybe don’t like standard filtering DT provides, let’s add InputPanel module. InputPanel module requires named list xInput() functions named list corresponding arguments. upside , may add input function another package, without breaking compatibility. add InputPanel let’s see contains. server() UI() method, now also inputValues active binding. inputValues reactive environment, input stored added xInput() functions. reference value specified inputId args arguments list creating new InputPanel module. can add server() UI() method calls shiny app. Note UI rendered first come, first serve:  Initially selection input shows correct thing, doesn’t actually filter data table. update data Table module.  minor overhead can make two modules communicate data one another.","code":"library(DarwinShinyModules)  table <- Table$new(data = iris)  table #> <Table> #>   Inherits from: <ShinyModule> #>   Public: #>     async: active binding #>     bindings: active binding #>     clone: function (deep = FALSE)  #>     data: active binding #>     filter: active binding #>     initialize: function (data, title = \"Table\", options = list(scrollX = TRUE),  #>     instanceId: active binding #>     moduleId: active binding #>     moduleName: active binding #>     namespace: active binding #>     options: active binding #>     parentNamespace: active binding #>     reactiveValues: active binding #>     server: function (input, output, session)  #>     title: active binding #>     UI: function ()  #>     validate: function ()  #>   Private: #>     .async: FALSE #>     .bindings: reactivevalues #>     .data: data.frame #>     .filter: top #>     .init: function ()  #>     .instanceId: SwlKLU5Ed6ieYxombQ_X #>     .moduleId: Table-SwlKLU5Ed6ieYxombQ_X #>     .moduleName: Table #>     .namespace: Table-SwlKLU5Ed6ieYxombQ_X #>     .options: list #>     .parentNamespace: NULL #>     .reactiveValues: NULL #>     .server: function (input, output, session)  #>     .title: Table #>     .UI: function ()  #>     checkMethodOverrides: function ()  #>     dlContent: function (file)  #>     dlFilename: function ()  #>     downloader: function (output)  #>     finalize: function ()  #>     makeInstanceId: function (n = 20)  #>     renderTable: function (output)  #>     setBindings: function (input) server <- function(input, output, session) {   table$server(input, output, session) }  UI <- shiny::fluidPage(   table$UI() )  shiny::shinyApp(ui = UI, server = server) table <- Table$new(   data = iris,   title = \"Iris Dataset\",   options = list(pageLength = 5),   filter = \"none\" )  server <- function(input, output, session) {   table$server(input, output, session) }  UI <- shiny::fluidPage(   table$UI() )  shiny::shinyApp(ui = UI, server = server) inputPanel <- InputPanel$new(   funs = list(     inputSpecies = shiny::selectInput   ),   args = list(     inputSpecies = list(       inputId = \"inputSpecies\",       label = \"Select Species\",       choices = unique(iris$Species),       selected = unique(iris$Species)[1]     )   ) )  inputPanel #> <InputPanel> #>   Inherits from: <ShinyModule> #>   Public: #>     args: active binding #>     async: active binding #>     clone: function (deep = FALSE)  #>     funs: active binding #>     initialize: function (funs, args)  #>     inputValues: active binding #>     instanceId: active binding #>     moduleId: active binding #>     moduleName: active binding #>     namespace: active binding #>     parentNamespace: active binding #>     reactiveValues: active binding #>     server: function (input, output, session)  #>     UI: function ()  #>     validate: function ()  #>   Private: #>     .args: list #>     .async: FALSE #>     .funs: list #>     .init: function ()  #>     .instanceId: uRHfdV8IyvQgF7i1jX4q #>     .moduleId: InputPanel-uRHfdV8IyvQgF7i1jX4q #>     .moduleName: InputPanel #>     .namespace: InputPanel-uRHfdV8IyvQgF7i1jX4q #>     .parentNamespace: NULL #>     .reactiveValues: NULL #>     .server: function (input, output, session)  #>     .UI: function ()  #>     checkMethodOverrides: function ()  #>     finalize: function ()  #>     makeInstanceId: function (n = 20)  #>     updateIds: function () server <- function(input, output, session) {   table$server(input, output, session)   inputPanel$server(input, output, session) }  UI <- shiny::fluidPage(   inputPanel$UI(),   table$UI() )  shiny::shinyApp(ui = UI, server = server) server <- function(input, output, session) {   table$server(input, output, session)   inputPanel$server(input, output, session)    # The `inputSpecies` reference is availible in the reactive `inputValues`   # envrionment in the `inputPanel`.   shiny::observeEvent(inputPanel$inputValues$inputSpecies, {     # We update the data in the `table` module     table$data <- iris %>%       dplyr::filter(.data$Species == inputPanel$inputValues$inputSpecies)   }) }  UI <- shiny::fluidPage(   inputPanel$UI(),   table$UI() )  shiny::shinyApp(ui = UI, server = server)"},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/articles/a02-using-shiny-modules-in-shiny-app.html","id":"the-bridge-module","dir":"Articles","previous_headings":"","what":"The Bridge Module","title":"Using modules in a shiny app","text":"Bridge module type module contains modules, “bridges” together. can use code previous example, implement Bridge instead. upside can nest two modules together, package new module, behave module. Lets first initiate Bridge module extra code. simply execute UI() server() methods, without interaction.  make inputPanel table modules interact, provide function makes interact. specify function regular shiny server() function. function executed server() methods modules. can use Bridge module, like module.  use bespoke shiny app.","code":"bridge <- Bridge$new(inputPanel, table)  preview(bridge) bridgeFun <- function(input, output, session) {   shiny::observeEvent(inputPanel$inputValues$inputSpecies, {     table$data <- iris %>%       dplyr::filter(.data$Species == inputPanel$inputValues$inputSpecies)   }) }  bridge <- Bridge$new(inputPanel, table, bridgeFun = bridgeFun) preview(bridge) library(shinydashboard) library(shiny)  ui <- dashboardPage(   header = dashboardHeader(title = \"My App\"),   sidebar = dashboardSidebar(     sidebarMenu(       menuItem(text = \"Iris Data\", tabName = \"bridge\")     )   ),   body = dashboardBody(     tabItems(       tabItem(         tabName = \"bridge\",         bridge$UI()       )     )   ) )  server <- function(input, output, session) {   bridge$server(input, output, session) }  shinyApp(ui, server)"},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/articles/a03-app-builders.html","id":"shiny-app-builders","dir":"Articles","previous_headings":"","what":"Shiny app builders","title":"Shiny App Builders","text":"DarwinShinyModules provides app builder functions. functions ingest app structure ShinyModule objects automatically create shiny app Lets create simple Text modules showcase building process: can organize modules nested named list. names overarching list main menu items, subsequent names sub menu items.  can also use darwinApp() function get DARWIN EU© themed shiny app.","code":"library(DarwinShinyModules)  base <- Text$new(\"**base**\") nested_a <- Text$new(\"**nested A**\") nested_b <- Text$new(\"**nested B**\") sub_a <- Text$new(\"**sub A**\") sub_b <- Text$new(\"**sub B**\") comb_a <- Text$new(\"**comb A**\") comb_b <- Text$new(\"**comb B**\") comb_c <- Text$new(\"**comb C**\") appStructure <- list(   # `base` on a page   base = base,    # Combine `nested_a` and `nested_b` Text on a page   nested = list(nested_a, nested_b),    # `sub_a` and `sub_b` on separate sub menu item   nested_sub = list(     sub_a = sub_a,     sub_b = sub_b   ),    nested_combined = list(     # Combine `comb_a` and `comb_b` on one page in a sub menu item     comb_a_b = list(comb_a, comb_b),      # `comb_c` on a separate sub menu item     comb_c = comb_c   ) )  launchShinydashboardApp(appStructure) darwinApp(appStructure, title = \"Study\")"},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/articles/a04-compatibility.html","id":"compatibility","dir":"Articles","previous_headings":"","what":"Compatibility","title":"Compatibility","text":"DarwinShinyModules compatible modules shiny code. One module might noticed documentation OhdsiModule. OhdsiModule module wraps around xViewer xServer functions. enables easily integrate already existing modules OhdsiShinyModules shiny apps built DarwinShinyModules. base setup look something like : can either preview module Launch shiny app using appStructure integrate bespoke shiny app","code":"# Create connection details to the results database connectionDetails <- DatabseConnector::createConnectionDetails(   dbms = \"sqlite\",   server = \"./results.sqlite\" )  # Create a ConnectionHandler object connectionHandler <- ResultModelManager::ConnectionHandler$new(   connectionDetails = connectionDetails )  # Make our module estimation <- OhdsiModule$new(   connectionHandler = connectionHandler,   viewerFun = estimationViewer,   serverFun = estimationServer,   resultDatabaseSettings = createDefaultResultDatabaseSettings() ) DarwinShinyModules::preview(estimation) appStructure <- list(   Estimation = estimation )  DarwinShinyModules::launchDarwinDashboardApp(appStructure) server <- function(input, output, session) {   # Do bespoke stuff ...   estimation$server(input, output, session) }  ui <- shiny::fluidPage(   # Bespoke UI ...   estimation$UI() )  shiny::shinyApp(ui, server)"},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/articles/a04-compatibility.html","id":"example-using-cohortmethod","dir":"Articles","previous_headings":"","what":"Example using CohortMethod","title":"Compatibility","text":"full example using CohortMethod run comparative effectiveness analysis Celexocib vs Diclofenac, outcome GiBleed shown .","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/articles/a04-compatibility.html","id":"run-the-analysis","dir":"Articles","previous_headings":"Example using CohortMethod","what":"Run the analysis","title":"Compatibility","text":"","code":"library(DatabaseConnector) library(Eunomia) library(CohortMethod)  connectionDetails <- Eunomia::getEunomiaConnectionDetails() Eunomia::createCohorts(   connectionDetails = connectionDetails,   cdmDatabaseSchema = \"main\",   cohortDatabaseSchema = \"main\",   cohortTable = \"cohort\" )  covarSettings <- FeatureExtraction::createDefaultCovariateSettings(   excludedCovariateConceptIds = c(     # Celexocib     1118084,     # Diclofenac     1124300   ),   addDescendantsToExclude = TRUE )  tcos <- list(CohortMethod::createTargetComparatorOutcomes(   targetId = 1,   comparatorId = 2,   outcomes = list(CohortMethod::createOutcome(     outcomeId = 3,     outcomeOfInterest = TRUE,     trueEffectSize = NA   )) ))  getDbCmDataArgs <- CohortMethod::createGetDbCohortMethodDataArgs(   studyStartDate = \"\",   studyEndDate = \"\",   covariateSettings = covarSettings )  studyPopArgs <- CohortMethod::createCreateStudyPopulationArgs(   firstExposureOnly = FALSE,   restrictToCommonPeriod = FALSE,   removeDuplicateSubjects = \"keep all\",   removeSubjectsWithPriorOutcome = TRUE,   minDaysAtRisk = 1,   startAnchor = \"cohort start\",   riskWindowStart = 0,   endAnchor = \"cohort end\",   riskWindowEnd = 30 )  psArgs <- CohortMethod::createCreatePsArgs()  matchPsArgs <- CohortMethod::createMatchOnPsArgs(caliper = 0.2)  outcomeModelArgs <- CohortMethod::createFitOutcomeModelArgs(modelType = \"cox\")  analysis <- CohortMethod::createCmAnalysis(   analysisId = 1,   description = \"Celecoxib vs Diclofenac\",   getDbCohortMethodDataArgs = getDbCmDataArgs,   createStudyPopArgs = studyPopArgs,   createPsArgs = psArgs,   matchOnPsArgs = matchPsArgs,   computeCovariateBalanceArgs = CohortMethod::createComputeCovariateBalanceArgs(),   computeSharedCovariateBalanceArgs = CohortMethod::createComputeCovariateBalanceArgs(),   fitOutcomeModelArgs = outcomeModelArgs )  outputFolder <- file.path(tempdir(), \"cm-test-output\")  refTable <- CohortMethod::runCmAnalyses(   connectionDetails = connectionDetails,   cdmDatabaseSchema = \"main\",   exposureDatabaseSchema = \"main\",   exposureTable = \"cohort\",   outcomeDatabaseSchema = \"main\",   outcomeTable = \"cohort\",   outputFolder = outputFolder,   cmAnalysisList = list(analysis),   targetComparatorOutcomesList = tcos )"},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/articles/a04-compatibility.html","id":"export-results","dir":"Articles","previous_headings":"Example using CohortMethod","what":"Export results","title":"Compatibility","text":"","code":"exportFolder <- file.path(tempdir(), \"cm-test-export\")  CohortMethod::exportToCsv(   outputFolder = outputFolder,   exportFolder = exportFolder,   databaseId = \"Eunomia\" )"},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/articles/a04-compatibility.html","id":"upload-results-to-database","dir":"Articles","previous_headings":"Example using CohortMethod","what":"Upload results to database","title":"Compatibility","text":"","code":"cg_cohort <- data.frame(   cohortId = c(1, 2, 3),   cohortName = c(\"celexocib\", \"diclofenac\", \"GiBleed\"),   sql = \"\",   json = \"\" )  resDb <- file.path(tempdir(), \"cm-test-res.sqlite\")  resConnectionDetails <- DatabaseConnector::createConnectionDetails(   dbms = \"sqlite\",   server = resDb )  CohortMethod::uploadExportedResults(   connectionDetails = resConnectionDetails,   databaseSchema = \"main\",   append = FALSE,   exportFolder = exportFolder,   cohorts = cg_cohort )"},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/articles/a04-compatibility.html","id":"make-a-shiny-module-using-darwinshinymodules-and-ohdsishinymodules","dir":"Articles","previous_headings":"Example using CohortMethod","what":"Make a shiny module using DarwinShinyModules and OhdsiShinyModules","title":"Compatibility","text":"","code":"library(DarwinShinyModules)  connectionHandler <- ResultModelManager::ConnectionHandler$new(connectionDetails = resConnectionDetails)  estimation <- DarwinShinyModules::OhdsiModule$new(   connectionHandler = connectionHandler,   viewerFun = OhdsiShinyModules::estimationViewer,   serverFun = OhdsiShinyModules::estimationServer )  appStructure <- list(   Comparative_Effectiveness = estimation )  # Default themed DarwinShinyModules::launchShinydashboardApp(appStructure, title = \"celecoxib vs diclofenac\")  # DARWIN themed DarwinShinyModules::launchDarwinDashboardApp(appStructure, title = \"celecoxib vs diclofenac\")"},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/articles/a05-creating-a-new-module.html","id":"the-shinymodule-class","dir":"Articles","previous_headings":"","what":"The ShinyModule Class","title":"Creating a new Module","text":"ShinyModule class interface inherited create modules. module class simple, yet convenient things: stores appId used shiny::NS() session$ns(). stores moduleName rather class name module. stores instanceId class. stores parentNamespace parent module. enables use re-use references similar outputs different modules. ShinyModule add correct namespacing use shiny::NS()","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/articles/a05-creating-a-new-module.html","id":"overrides","dir":"Articles","previous_headings":"","what":"Overrides","title":"Creating a new Module","text":"inheriting ShinyModule class expected override UI() / server() methods. UI() method return something akin shiny::tagList(). default defined, nothing. allows just rendering simple text module, without back-end like DarwinShinyModules::Text module. static image.","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/articles/a05-creating-a-new-module.html","id":"defining-a-new-module","dir":"Articles","previous_headings":"","what":"Defining a new module","title":"Creating a new Module","text":"base interface creating new module : can see new R6 class inheriting DarwinShinyModules::ShinyModule UI server method. new module can either directly add functionality functions, use private active fields methods within R6 framework. familiar functions, may want call server ui functions module, like : Let’s remake MyModule putting functionality directly module, see extra funcionality information exists module. module want : Display head() iris data frame, using \"myTable\" input / output reference. Display appId, moduleName, instanceId, using \"moduleData\" input / output reference. initialize module object call new() method defined MyModule: see module contains can simply print() module instance: several items listed Public: appId, clone(), data, id() initialize(), instanceId, moduleName, server(), UI(), validate(). Note appId, data, instanceId, moduleName Private counter parts: .appId, .data, .instanceId, moduleName. can get active fields module MyModule like : Notice initialize multiple instances type module instanceId different per instance: can spin simple shiny app using module:","code":"library(DarwinShinyModules)  MyModule <- R6::R6Class(   classname = \"MyModule\",   inherit = ShinyModule,    private = list(     # Override UI()     .UI = function() {},      # Override server()     .server = function(input, output, session) {}   ) ) library(DarwinShinyModules) library(shiny)  myUi <- fluidPage(   tableOutput(outputId = shiny::NS(\"id\", \"table\")) )  myServer <- function(input, output, session) {   output$table <- renderTable({     head(iris)   }) }  MyModule <- R6::R6Class(   classname = \"MyModule\",   inherit = ShinyModule,    private = list(     # Override UI()     .UI = function() {       myUi     },      # Override server()     .server = function(input, output, session) {       myServer(input, output, session)     }   ) ) library(DarwinShinyModules)  MyModule <- R6::R6Class(   classname = \"MyModule\",   inherit = ShinyModule,    active = list(     # Additional active binding field, to fetch the private field .data     data = function() return(private$.data)   ),    private = list(     # Additional private field, containing the `iris` data.frame     .data = iris,      # Override UI()     .UI = function() {       shiny::tagList(         # Output a table \"input$app-MyModule_ABCDEFGHIJ__myTable\"         shiny::tableOutput(outputId = shiny::NS(private$.namespace, \"myTable\")),         # Output HTML \"input$app-MyModule_ABCDEFGHIJ_moduleData\"         shiny::uiOutput(outputId = shiny::NS(private$.namespace, \"moduleData\"))       )     },      # Override server()     .server = function(input, output, session) {       output$myTable <- shiny::renderTable({         head(private$.data)       })              # Render the HTML to \"MyModule_ABCDEFGHIJ_moduleData\"       output$moduleData <- shiny::renderUI({         shiny::HTML(paste(           sprintf(\"App ID: %s\", private$.moduleId),           sprintf(\"Module Name: %s\", private$.moduleName),           sprintf(\"Instance ID: %s\", private$.instanceId),           sep = \"<br/>\"         ))       })     }   ) ) module <- MyModule$new() print(module) #> <MyModule> #>   Inherits from: <ShinyModule> #>   Public: #>     async: active binding #>     clone: function (deep = FALSE)  #>     data: active binding #>     initialize: function ()  #>     instanceId: active binding #>     moduleId: active binding #>     moduleName: active binding #>     namespace: active binding #>     parentNamespace: active binding #>     reactiveValues: active binding #>     server: function (input, output, session)  #>     UI: function ()  #>     validate: function ()  #>   Private: #>     .async: FALSE #>     .data: data.frame #>     .init: function ()  #>     .instanceId: SwlKLU5Ed6ieYxombQ_X #>     .moduleId: MyModule-SwlKLU5Ed6ieYxombQ_X #>     .moduleName: MyModule #>     .namespace: MyModule-SwlKLU5Ed6ieYxombQ_X #>     .parentNamespace: NULL #>     .reactiveValues: NULL #>     .server: function (input, output, session)  #>     .UI: function ()  #>     checkMethodOverrides: function ()  #>     finalize: function ()  #>     makeInstanceId: function (n = 20) module$moduleId #> [1] \"MyModule-SwlKLU5Ed6ieYxombQ_X\" module$instanceId #> [1] \"SwlKLU5Ed6ieYxombQ_X\" module$moduleName #> [1] \"MyModule\" head(module$data) #>   Sepal.Length Sepal.Width Petal.Length Petal.Width Species #> 1          5.1         3.5          1.4         0.2  setosa #> 2          4.9         3.0          1.4         0.2  setosa #> 3          4.7         3.2          1.3         0.2  setosa #> 4          4.6         3.1          1.5         0.2  setosa #> 5          5.0         3.6          1.4         0.2  setosa #> 6          5.4         3.9          1.7         0.4  setosa mod1 <- MyModule$new() mod2 <- MyModule$new() mod3 <- MyModule$new()  mod1$instanceId #> [1] \"uRHfdV8IyvQgF7i1jX4q\" mod2$instanceId #> [1] \"Z4vEafHYT6yUXKhGFRsB\" mod3$instanceId #> [1] \"BVkzIbwPcLd3aMfvs5NX\" ui <- shiny::fluidPage(   module$UI() )  server <- function(input, output, session) {   module$server(input, output, session) }  shiny::shinyApp(ui, server)"},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/articles/a05-creating-a-new-module.html","id":"multiple-modules-in-one-shinyapp","dir":"Articles","previous_headings":"","what":"Multiple Modules in one ShinyApp","title":"Creating a new Module","text":"can also combine multiple modules one ShinyApp. can make new module called: MyModule2 inherits MyModule. want module exactly , instead looking iris data, want look mtcars. can spin new ShinyApp:","code":"MyModule2 <- R6::R6Class(   classname = \"MyModule2\",   inherit = MyModule,   private = list(     .data = mtcars   ) )  # initialize a MyModule2 instance module2 <- MyModule2$new() ui <- shiny::fluidPage(   module$UI(),   module2$UI() )  server <- function(input, output, session) {   module$server(input, output, session)   module2$server(input, output, session) }  shiny::shinyApp(ui, server)"},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/articles/a05-creating-a-new-module.html","id":"nesting-modules","dir":"Articles","previous_headings":"","what":"Nesting modules","title":"Creating a new Module","text":"Modules may nested modules. nested modules can communicate data one another. Let’s conciser following plot function, iris dataset. add arbitrary size column example, manipulate later change plot.  create two modules, Table plotStatic module, parent module, ExampleModule. Let’s create base module first: ExampleModule. can now add modules want nest ExampleModule, module initialized. modules added, can call respective server() UI() methods module. now something look , let’s preview module  Table PlotStatic modules now independent one another. However, can change adding extra code .server() method. can preview module .  can see select rows table, size updates plot selected row. code used looks like :","code":"data <- iris data$size <- 0.5  plotFun <- function(data) {   ggplot2::ggplot(data = data) +     ggplot2::geom_point(mapping = ggplot2::aes(x = Sepal.Width, y = Sepal.Length, size = size)) +     ggplot2::facet_grid(. ~ Species) }  plotFun(data) ExampleModule <- R6::R6Class(   classname = \"ExampleModule\",   inherit = ShinyModule,    private = list(     .UI = function() {},          .server = function(input, output, session) {}   ) ) ExampleModule <- R6::R6Class(   classname = \"ExampleModule\",   inherit = ShinyModule,      public = list(     # We are overriding the initialize of `ShinyModule` here     initialize = function(data) {       # So we call `super$initialize()` to make sure we still initialize properly       super$initialize()       # We are now free to add extra things        # We add a `Table` module, with the `iris` data set, with no title.       private$.table <- Table$new(data = data, title = NULL)        # We add a `PlotStatic` module with same data, also the  `iris` dataset.       private$.plot <- PlotStatic$new(fun = plotFun, args = list(data = data))       # In order to add the `private$.table` and `private$.plot` we add them to       # our private environment. So they are accessable in all other methods       # like the `.server()` and `.UI()` methods.        # in order to make sure the namespacing is done correctly, we must update       # the `parentNamespace` fields in both the `Table` and `PlotStatic` modules.       # The `parentNamespace` is the namespace of the overarching module, which       # we can access with `self$namespace`       private$.table$parentNamespace <- self$namespace       private$.plot$parentNamespace <- self$namespace     }   ),    private = list(     # We MUST initialize the private fields. This makes sure the fields exist     # when we write to them in `initialize()`.     .table = NULL,     .plot = NULL,      .UI = function() {},          .server = function(input, output, session) {}   ) ) ExampleModule <- R6::R6Class(   classname = \"ExampleModule\",   inherit = ShinyModule,      public = list(     initialize = function(data) {       super$initialize()        # Create modules       private$.table <- Table$new(data = data, title = NULL)       private$.plot <- PlotStatic$new(fun = plotFun, args = list(data = data))        # Set `parentNamespace`       private$.table$parentNamespace <- self$namespace       private$.plot$parentNamespace <- self$namespace     }   ),    private = list(     .table = NULL,     .plot = NULL,      .UI = function() {       # We must wrap the individual components in something like a `tagList()`,       # `fluidPage()`, or something similar.       shiny::tagList(         private$.plot$UI(),         private$.table$UI()       )     },          .server = function(input, output, session) {       private$.plot$server(input, output, session)       private$.table$server(input, output, session)     }   ) ) mod <- ExampleModule$new(data = data)  preview(mod) ExampleModule <- R6::R6Class(   classname = \"ExampleModule\",   inherit = ShinyModule,      public = list(     initialize = function(data) {       super$initialize()        # Create modules       private$.table <- Table$new(data = data, title = NULL)       private$.plot <- PlotStatic$new(fun = plotFun, args = list(data = data))        # Set `parentNamespace`       private$.table$parentNamespace <- self$namespace       private$.plot$parentNamespace <- self$namespace     }   ),    private = list(     .table = NULL,     .plot = NULL,      .UI = function() {       shiny::tagList(         private$.plot$UI(),         private$.table$UI()       )     },          .server = function(input, output, session) {       private$.plot$server(input, output, session)       private$.table$server(input, output, session)        # `private$.table$bindings$rows_selected` is a binding exposed by the       # `Table` module. It is a binding from the `DT` package that allows is to       # see which rows are selected in the table. We can observe this specific       # event with `observeEvent()`       shiny::observeEvent(private$.table$bindings$rows_selected, {         # The `PlotX` modules expose an `args` binding to get access to it's         # arguments that it uses for plotting. Our `data` argument is there that         # we specified in `plotFun()`         private$.plot$args$data[, \"size\"] <- 0.5         # We reset the `size` to 0.5 whenever the event triggers.                  # We then fetch the rows which rows are selected in the `Table` module         selectedRows <- private$.table$bindings$rows_selected                  # We then update the`\"size\"` column to change the size to `10` for all         # the selected rows.         private$.plot$args$data[selectedRows, \"size\"] <- 10       })     }   ) ) mod <- ExampleModule$new(data = data)  preview(mod) # Format data data <- iris data$size <- 0.5  # Plot function plotFun <- function(data) {   ggplot2::ggplot(data = data) +     ggplot2::geom_point(mapping = ggplot2::aes(x = Sepal.Width, y = Sepal.Length, size = size)) +     ggplot2::facet_grid(. ~ Species) }  # Module definition ExampleModule <- R6::R6Class(   classname = \"ExampleModule\",   inherit = ShinyModule,      public = list(     initialize = function(data) {       super$initialize()        # Create modules       private$.table <- Table$new(data = data, title = NULL)       private$.plot <- PlotStatic$new(fun = plotFun, args = list(data = data))        # Set `parentNamespace`       private$.table$parentNamespace <- self$namespace       private$.plot$parentNamespace <- self$namespace     }   ),    private = list(     .table = NULL,     .plot = NULL,      .UI = function() {       shiny::tagList(         private$.plot$UI(),         private$.table$UI()       )     },          .server = function(input, output, session) {       # Pre-specified plot and table code       private$.plot$server(input, output, session)       private$.table$server(input, output, session)        # Communication code       shiny::observeEvent(private$.table$bindings$rows_selected, {         private$.plot$args$data[, \"size\"] <- 0.5         selectedRows <- private$.table$bindings$rows_selected         private$.plot$args$data[selectedRows, \"size\"] <- 10       })     }   ) )"},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/articles/a06-loading-data.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Loading Data From Different Sources","text":"Data can come anywhere. DarwinShinyModules assumes load data whatever source like. may csv-file, table database. end data loaded memory R. intention behind individual modules () small. can used large overarching modules. vignette explore load data files databases, either pre-loading data memory. loading data dynamically, run time. Finally also show use DatabaseDBI DatabaseDBC modules.","code":""},{"path":[]},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/articles/a06-loading-data.html","id":"from-a-file","dir":"Articles","previous_headings":"Preloading data","what":"From a File","title":"Loading Data From Different Sources","text":"","code":"library(DarwinShinyModules)  tempDir <- file.path(tempdir(), \"loading_data_example\") dir.create(tempDir, showWarnings = FALSE, recursive = TRUE) write.csv(iris, file.path(tempDir, \"iris.csv\"), row.names = FALSE) write.csv(mtcars, file.path(tempDir, \"mtcars.csv\"), row.names = FALSE)  data <- read.csv(file.path(tempDir, \"iris.csv\"))  tableFile <- Table$new(data = data)  if (interactive()) {   preview(tableFile) }"},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/articles/a06-loading-data.html","id":"a-database-using-dbi","dir":"Articles","previous_headings":"Preloading data","what":"A database using DBI","title":"Loading Data From Different Sources","text":"","code":"library(DBI) library(duckdb) library(dplyr)  driver <- duckdb::duckdb(   dbdir = file.path(tempDir, \"database.duckdb\") )  con <- DBI::dbConnect(   drv = driver )  DBI::dbWriteTable(   conn = con,   name = \"iris\",   value = iris,   overwrite = TRUE )  DBI::dbWriteTable(   conn = con,   name = \"mtcars\",   value = mtcars,   overwrite = TRUE )  iris_db <- dplyr::tbl(src = con, \"iris\")  data <- iris_db %>%   dplyr::collect()  tableDB <- Table$new(data = data)  if (interactive()) {   preview(tableDB) }"},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/articles/a06-loading-data.html","id":"from-a-database-using-databaseconnector","dir":"Articles","previous_headings":"Preloading data","what":"From a database using DatabaseConnector","title":"Loading Data From Different Sources","text":"","code":"library(DatabaseConnector)  connectionDetails <- DatabaseConnector::createConnectionDetails(   dbms = \"sqlite\",    server = file.path(tempDir, \"database.sqlite\") )  connection <- DatabaseConnector::connect(connectionDetails)  DatabaseConnector::insertTable(   connection = connection,   databaseSchema = \"main\",   tableName = \"iris\",   data = iris )  DatabaseConnector::insertTable(   connection = connection,   databaseSchema = \"main\",   tableName = \"mtcars\",   data = mtcars )  data <- DatabaseConnector::renderTranslateQuerySql(   connection = connection,   sql = \"SELECT * FROM iris;\" )  DatabaseConnector::disconnect(connection)  tableDBC <- Table$new(data)  if (interactive()) {   preview(tableDBC) }"},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/articles/a06-loading-data.html","id":"using-a-database-in-your-module","dir":"Articles","previous_headings":"","what":"Using a database in your module","title":"Loading Data From Different Sources","text":"can dynamically load data files database module. loaded data can used regular DarwinShinyModule modules. following examples show dynamically load : CSV-files database using DBI maintaining database connection database using DatabaseConnector, managing connection run time.","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/articles/a06-loading-data.html","id":"from-csv-files","dir":"Articles","previous_headings":"Using a database in your module","what":"From csv-files","title":"Loading Data From Different Sources","text":"","code":"TablesFromFile <- R6::R6Class(   classname = \"TablesFromFile\",   inherit = ShinyModule,    public = list(     initialize = function(filePath) {       private$.filePath <- filePath       # initialize the `Table` module with an empty data.frame       private$.table <- Table$new(data = data.frame())       private$.table$parentNamespace <- self$namespace     }   ),   private = list(     ## Fields     .filePath = \"\",     .table = NULL,      ## Methods     .UI = function() {       shiny::tagList(         # Select input to get csv-files from `tempDir`         shiny::selectInput(           inputId = shiny::NS(self$namespace, \"file\"),           label = \"File\",           # Get csv-file names for `tempDir`           choices = private$getCsvFiles()         ),         private$.table$UI()       )     },      .server = function(input, output, session) {       private$.table$server(input, output, session)        # Trigger on the file-selector       shiny::observeEvent(input$file, {         # Update the data field in the `Table` module with the selected csv-file         private$.table$data <- read.csv(file.path(private$.filePath, input$file))       })     },      # Get all csv-files from `tempDir`     getCsvFiles = function() {       allFiles <- basename(list.files(private$.filePath))       allFiles[endsWith(allFiles, suffix = \".csv\")]     }   ) )  mod <- TablesFromFile$new(tempDir)  if (interactive()) {   preview(mod) }"},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/articles/a06-loading-data.html","id":"from-a-database-using-dbi","dir":"Articles","previous_headings":"Using a database in your module","what":"From a database using DBI","title":"Loading Data From Different Sources","text":"example maintain connection database, post run-time.","code":"TablesFromDBI <- R6::R6Class(   classname = \"TablesFromDBI\",   inherit = ShinyModule,    public = list(     initialize = function(con) {       private$.con <- con       # initialize the `Table` module with an empty data.frame       private$.table <- Table$new(data = data.frame())       private$.table$parentNamespace <- self$namespace     }   ),   private = list(     ## Fields     .con = NULL,     .table = NULL,      ## Methods     .UI = function() {       shiny::tagList(         # Select input to get csv-files from `tempDir`         shiny::selectInput(           inputId = shiny::NS(self$namespace, \"table\"),           label = \"Table\",           # List tables from the connection           choices = DBI::dbListTables(private$.con)         ),         private$.table$UI()       )     },      .server = function(input, output, session) {       private$.table$server(input, output, session)        # Trigger on the file-selector       shiny::observeEvent(input$table, {         # Fetch table from DBI connection         private$.table$data <- dplyr::tbl(src = private$.con, input$table) %>%           # We need to collect, as the table needs to be in memory           dplyr::collect()       })     }   ) )  mod <- TablesFromDBI$new(con)  if (interactive()) {   preview(mod) }  DBI::dbDisconnect(con)"},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/articles/a06-loading-data.html","id":"from-a-database-using-databaseconnector-1","dir":"Articles","previous_headings":"Using a database in your module","what":"From a database using DatabaseConnector","title":"Loading Data From Different Sources","text":"example manage connection database within run time.","code":"TablesFromDBC <- R6::R6Class(   classname = \"TablesFromDBC\",   inherit = ShinyModule,    public = list(     initialize = function(connectionDetails) {       # Save connectionDetails       private$.connectionDetails <- connectionDetails       # initialize the `Table` module with an empty data.frame       private$.table <- Table$new(data = data.frame())       private$.table$parentNamespace <- self$namespace     }   ),    private = list(     ## Fields     .connectionDetails = NULL,     .connection = NULL,     .table = NULL,      ## Methods     .UI = function() {       shiny::tagList(         # Select input to get csv-files from `tempDir`         shiny::selectInput(           inputId = shiny::NS(self$namespace, \"table\"),           label = \"Table\",           # Initialize empty, we update once the connection is established.           choices = \"\"         ),         private$.table$UI()       )     },      .server = function(input, output, session) {       # Connect to the database if `.connection` is `NULL`       if (is.null(private$.connection)) {         private$.connection <- DatabaseConnector::connect(connectionDetails)       }        # Run the `finalize` method when the session ends >>this includes refreshing the session<<       shiny::onStop(private$finalize)        private$.table$server(input, output, session)              # If we're connected to the database       if (!is.null(private$.connection)) {         # The `updated` flag ensures we update the choices once. Otherwise we         # continuously query the database for table names. Which is not desirable         # for this use case. The database has a separate state, and can therefore         # change at will, in a different connection. New tables could appear,         # existing tables could disappear.         updated <- FALSE         if (!updated) {           # Update choices in select           shiny::updateSelectInput(             inputId = \"table\",             choices = private$fetchTableNames()           )           updated <- TRUE         }            # Trigger on the file-selector         shiny::observeEvent(input$table, {           # Only query the table when the selector is updated           if (input$table != \"\") {             # Fetch table from the database             private$.table$data <- DatabaseConnector::renderTranslateQuerySql(               connection = private$.connection,               sql = \"SELECT * FROM @table\",               table = input$table             )           }         })       }     },      # Fetches the names of the tables in SQLite     fetchTableNames = function() {       if (!is.null(private$.connection)) {         DatabaseConnector::renderTranslateQuerySql(         connection = private$.connection,         sql = \"SELECT name FROM sqlite_master WHERE type = 'table'\"       ) %>%           dplyr::pull(.data$NAME)       }     },      # A feature of R6 is that the `Finalize` method also runs when the object is garbage collected.     finalize = function() {       if (!is.null(private$.connection)) {         # Disconnect from database         DatabaseConnector::disconnect(private$.connection)         # Set `.connection` to `NULL`         private$.connection <- NULL       }     }   ) )  mod <- TablesFromDBC$new(connectionDetails)  if (interactive()) {   preview(mod) }"},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/articles/a06-loading-data.html","id":"database-modules","dir":"Articles","previous_headings":"","what":"Database Modules","title":"Loading Data From Different Sources","text":"database modules developed based previous example. Two implementations exist writing, database module using DatabaseConnector, module using DBI. upside using modules manage connection . open connection start-, close shutdown. connection unexpectedly drops, also prompt user re-connect database.","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/articles/a06-loading-data.html","id":"databasedbi","dir":"Articles","previous_headings":"Database Modules","what":"DatabaseDBI","title":"Loading Data From Different Sources","text":"DatabaseDBI module uses DBI interface database. ideal want use dplyr syntax query database run-time shiny app.","code":"# Setup the module with the driver for the database db <- DatabaseDBI$new(driver)  # We initialize the table modules with an empty data.frame irisTable <- Table$new(data.frame(), title = NULL) carTable <- Table$new(data.frame(), title = NULL)  ui <- shiny::fluidPage(   irisTable$UI(),   carTable$UI(),   db$UI() )  server <- function(input, output, session) {   # Run the server methods   db$server(input, output, session)   irisTable$server(input, output, session)   carTable$server(input, output, session)    # Attach tables `iris` and `mtcars` from the database   db$attachTables(\"iris\", \"mtcars\")    # Update `data` field in `irisTable` module   irisTable$data <- db$tables$iris %>%     # We can use dplyr syntax that is supported by the driver     dplyr::mutate(       foo = .data$Sepal.Length * .data$Sepal.Width     ) %>%     head() %>%     # We MUST collect the data, as `DarwinShinyModules` expects the final result     # to be in memory.     dplyr::collect()    carTable$data <- db$tables$mtcars %>%     dplyr::group_by(.data$cyl) %>%     dplyr::summarise(mean_hp = mean(.data$hp, na.rm = TRUE), .groups = \"drop\") %>%     dplyr::collect() }  if (interactive()) {   shiny::shinyApp(ui, server) }"},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/articles/a06-loading-data.html","id":"databasedbc","dir":"Articles","previous_headings":"Database Modules","what":"DatabaseDBC","title":"Loading Data From Different Sources","text":"DatabaseDBC module uses DatabaseConnector interface database. ideal want use SQL query database run-time shiny app.","code":"# Setup the module with the ConnectionDetails of the database db <- DatabaseDBC$new(connectionDetails)  # We initialize the table modules with an empty data.frame irisTable <- Table$new(data.frame(), title = NULL) carTable <- Table$new(data.frame(), title = NULL)  ui <- shiny::fluidPage(   irisTable$UI(),   carTable$UI(),   db$UI() )  server <- function(input, output, session) {   # If we want to run code in shiny::onStop() we must do that before the   # server() method.   stopFun <- function() {     db$execute(       # Drop a table we create later       sql = \"DROP TABLE IF EXISTS tmp_table;\"     )   }    shiny::onStop(stopFun)    # Run the server methods   db$server(input, output, session)   irisTable$server(input, output, session)   carTable$server(input, output, session)    # query the database, we can use all arguments from DatabaseConnectors   #`renderTranslateQuerySql()`   irisTable$data <- db$query(     sql = \"SELECT * FROM @schema.iris LIMIT 10\",     schema = \"main\"   )    # We can also execute queries in the database   db$execute(\"     DROP TABLE IF EXISTS tmp_table;          SELECT       cyl,       AVG(hp) as avg_hp     FROM @schema.mtcars     GROUP BY cyl     INTO tmp_table;\",     schema = \"main\"   )    # Assign the result from `tmp_table` to `carTable`   carTable$data <- db$query(     sql = \"SELECT * FROM @schema.tmp_table;\",     schema = \"main\"   ) }  shiny::shinyApp(ui, server)"},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Ger Inberg. Author. Maarten van Kessel. Author, maintainer. Erasmus MC. Copyright holder.","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Inberg G, van Kessel M (2025). DarwinShinyModules: Repository Shiny Modules Darwin Result Viewers. R package version 0.2.0, https://darwin-eu-dev.github.io/DarwinShinyModules/.","code":"@Manual{,   title = {DarwinShinyModules: Repository of Shiny Modules for Darwin Result Viewers},   author = {Ger Inberg and Maarten {van Kessel}},   year = {2025},   note = {R package version 0.2.0},   url = {https://darwin-eu-dev.github.io/DarwinShinyModules/}, }"},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/index.html","id":"darwinshinymodules","dir":"","previous_headings":"","what":"Repository of Shiny Modules for Darwin Result Viewers","title":"Repository of Shiny Modules for Darwin Result Viewers","text":"DarwinShinyModules R package containing shiny modules. module represented R6 object, contains pre-specified UI elements, back-end code.","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/index.html","id":"features","dir":"","previous_headings":"","what":"Features","title":"Repository of Shiny Modules for Darwin Result Viewers","text":"Provides pre-specified modules common shiny app components. Provides pre-specified modules DARWIN EU© analytical pipelines (progress). Ability overwrite UI elements server back-end bespoke code. Compatible bespoke shiny application development. Seamlessly integrate existing OhdsiShinyModules. Extend existing library modules","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Repository of Shiny Modules for Darwin Result Viewers","text":"install latest stable version:","code":"install.packages(\"remotes\") remotes::install_github('darwin-eu-dev/DarwinShinyModules')"},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Repository of Shiny Modules for Darwin Result Viewers","text":"","code":"library(DarwinShinyModules)  irisTable <- Table$new(iris) carsTable <- Table$new(mtcars)  darwinApp(   list(     Tables = list(       Iris = irisTable,       MT_Cars = carsTable     )   ) )"},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"Repository of Shiny Modules for Darwin Result Viewers","text":"DarwinShinyModules licensed Apache License 2.0","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/Bridge.html","id":null,"dir":"Reference","previous_headings":"","what":"Bridge Module Class — Bridge","title":"Bridge Module Class — Bridge","text":"Bridge module \"birdges\" multiple modules bespoke server code.","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/Bridge.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bridge Module Class — Bridge","text":"self","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/Bridge.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Bridge Module Class — Bridge","text":"Bridge module links two modules together user defined server code.","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/Bridge.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"Bridge Module Class — Bridge","text":"DarwinShinyModules::ShinyModule -> Bridge","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/Bridge.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"Bridge Module Class — Bridge","text":"modules (list) List modules. birdgeFun (function) Function bridges modules.","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/Bridge.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Bridge Module Class — Bridge","text":"DarwinShinyModules::ShinyModule$UI() DarwinShinyModules::ShinyModule$server() DarwinShinyModules::ShinyModule$validate()","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/Bridge.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Bridge Module Class — Bridge","text":"Bridge$new() Bridge$clone()","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/Bridge.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Bridge Module Class — Bridge","text":"Initializer method.","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/Bridge.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bridge Module Class — Bridge","text":"","code":"Bridge$new(..., bridgeFun = NULL)"},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/Bridge.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bridge Module Class — Bridge","text":"... (ShinyModule) ShinyModules bridge. bridgeFun (function: NULL) Server function make modules interact eachother. setup shiny server function takes input, output, session parameters.","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/Bridge.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Bridge Module Class — Bridge","text":"objects class cloneable method.","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/Bridge.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Bridge Module Class — Bridge","text":"","code":"Bridge$clone(deep = FALSE)"},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/Bridge.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bridge Module Class — Bridge","text":"deep Whether make deep clone.","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/Bridge.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bridge Module Class — Bridge","text":"","code":"library(DarwinShinyModules)  table <- Table$new(data = mtcars)  inputPanel <- InputPanel$new(   funs = list(   inputSpecies = shiny::selectInput   ),   args = list(     inputSpecies = list(       inputId = \"inputSpecies\",       label = \"Select Species\",       choices = unique(iris$Species),       selected = unique(iris$Species)[1]     )   ) )  bridgeFun <- function(input, output, session) {   shiny::observeEvent(inputPanel$inputValues$inputSpecies, {     table$data <- iris %>%       dplyr::filter(.data$Species == inputPanel$inputValues$inputSpecies)   }) }  bridge <- Bridge$new(inputPanel, table, bridgeFun = bridgeFun)  if (interactive()) {   preview(bridge) }"},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/CohortSurvival.html","id":null,"dir":"Reference","previous_headings":"","what":"CohortSurvival Module Class — CohortSurvival","title":"CohortSurvival Module Class — CohortSurvival","text":"CohortSurvival module shows supports results CohortSurvival package.","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/CohortSurvival.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"CohortSurvival Module Class — CohortSurvival","text":"module consists following: \"PlotPlotly\" Interactive Plotly plot, visualizing data. \"GTTable\" gttable visualizing tidy data \"InputPanel\" Input panel dealing user input \"Table\" basic table visualizing raw data","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/CohortSurvival.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"CohortSurvival Module Class — CohortSurvival","text":"DarwinShinyModules::ShinyModule -> CohortSurvival","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/CohortSurvival.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"CohortSurvival Module Class — CohortSurvival","text":"data (SummarisedResult) Summarised result object CohortSurvival plot (Plot) Plot module. tidyTable (GTTable) GTTable module table (Table) Table module inputPanel (InputPanel) InputPanel module","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/CohortSurvival.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"CohortSurvival Module Class — CohortSurvival","text":"DarwinShinyModules::ShinyModule$UI() DarwinShinyModules::ShinyModule$server() DarwinShinyModules::ShinyModule$validate()","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/CohortSurvival.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"CohortSurvival Module Class — CohortSurvival","text":"CohortSurvival$new() CohortSurvival$clone()","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/CohortSurvival.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"CohortSurvival Module Class — CohortSurvival","text":"Initializer function","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/CohortSurvival.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"CohortSurvival Module Class — CohortSurvival","text":"","code":"CohortSurvival$new(data)"},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/CohortSurvival.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"CohortSurvival Module Class — CohortSurvival","text":"data (SummarisedResults) Summarised result object CohortSurvival","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/CohortSurvival.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"CohortSurvival Module Class — CohortSurvival","text":"invisible(self)","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/CohortSurvival.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"CohortSurvival Module Class — CohortSurvival","text":"objects class cloneable method.","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/CohortSurvival.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"CohortSurvival Module Class — CohortSurvival","text":"","code":"CohortSurvival$clone(deep = FALSE)"},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/CohortSurvival.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"CohortSurvival Module Class — CohortSurvival","text":"deep Whether make deep clone.","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/CohortSurvival.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"CohortSurvival Module Class — CohortSurvival","text":"","code":"{ # \\donttest{  library(DarwinShinyModules)   if (    require(      \"CohortSurvival\",      character.only = TRUE,      quietly = TRUE,      warn.conflicts = FALSE    )  ) {     library(CDMConnector)     library(CohortSurvival)      cdm <- CohortSurvival::mockMGUS2cdm()      MGUS_death <- estimateSingleEventSurvival(       cdm,       targetCohortTable = \"mgus_diagnosis\",       outcomeCohortTable = \"death_cohort\",       strata = list(         c(\"age_group\"),         c(\"sex\"),         c(\"age_group\", \"sex\")       )     )      cs <- CohortSurvival$new(data = MGUS_death)     if (interactive()) {       preview(cs)     }   } # } } #> - Getting survival for target cohort 'mgus_diagnosis' and outcome cohort #> 'death_cohort' #> Getting overall estimates #> `eventgap`, `outcome_washout`, `censor_on_cohort_exit`, `follow_up_days`, and #> `minimum_survival_days` casted to character."},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/DarwinShinyModules-package.html","id":null,"dir":"Reference","previous_headings":"","what":"DarwinShinyModules: Repository of Shiny Modules for Darwin Result Viewers — DarwinShinyModules-package","title":"DarwinShinyModules: Repository of Shiny Modules for Darwin Result Viewers — DarwinShinyModules-package","text":"Install package access useful shiny modules building shiny apps explore results using Darwin tools.","code":""},{"path":[]},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/DarwinShinyModules-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"DarwinShinyModules: Repository of Shiny Modules for Darwin Result Viewers — DarwinShinyModules-package","text":"Maintainer: Maarten van Kessel m.l.vankessel@erasmusmc.nl (ORCID) Authors: Ger Inberg g.inberg@erasmusmc.nl (ORCID) contributors: Erasmus MC [copyright holder]","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/Database.html","id":null,"dir":"Reference","previous_headings":"","what":"Database Decorator Class — Database","title":"Database Decorator Class — Database","text":"class decorator meant directly used, inherited modules, like DatabaseDBC DatabaseDBI.","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/Database.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Database Decorator Class — Database","text":"inherited Database modules implementation connect , query database. add new database type required inherit Database class, override private connect() disconnect() methods, extend functionality query database. DatabaseDBC extends class public query() execute() methods, DatabaseDBI extends attachTables() detatchTables() methods, public tables field.","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/Database.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"Database Decorator Class — Database","text":"DarwinShinyModules::ShinyModule -> Database","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/Database.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"Database Decorator Class — Database","text":"connected (logical(1)) Logical connected database.","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/Database.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Database Decorator Class — Database","text":"DarwinShinyModules::ShinyModule$UI() DarwinShinyModules::ShinyModule$initialize() DarwinShinyModules::ShinyModule$server() DarwinShinyModules::ShinyModule$validate()","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/Database.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Database Decorator Class — Database","text":"Database$clone()","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/Database.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Database Decorator Class — Database","text":"objects class cloneable method.","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/Database.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Database Decorator Class — Database","text":"","code":"Database$clone(deep = FALSE)"},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/Database.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Database Decorator Class — Database","text":"deep Whether make deep clone.","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/DatabaseDBC.html","id":null,"dir":"Reference","previous_headings":"","what":"DatabaseDBC Class — DatabaseDBC","title":"DatabaseDBC Class — DatabaseDBC","text":"class extends Database class, query database using DatabaseConnector JDBC.","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/DatabaseDBC.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"DatabaseDBC Class — DatabaseDBC","text":"DarwinShinyModules::ShinyModule -> DarwinShinyModules::Database -> DatabaseDBC","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/DatabaseDBC.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"DatabaseDBC Class — DatabaseDBC","text":"DarwinShinyModules::ShinyModule$UI() DarwinShinyModules::ShinyModule$server() DarwinShinyModules::ShinyModule$validate()","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/DatabaseDBC.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"DatabaseDBC Class — DatabaseDBC","text":"DatabaseDBC$new() DatabaseDBC$query() DatabaseDBC$execute() DatabaseDBC$clone()","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/DatabaseDBC.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"DatabaseDBC Class — DatabaseDBC","text":"Initializer method","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/DatabaseDBC.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DatabaseDBC Class — DatabaseDBC","text":"","code":"DatabaseDBC$new(connectionDetails)"},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/DatabaseDBC.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DatabaseDBC Class — DatabaseDBC","text":"connectionDetails (ConnectionDetails) Connection Details DatabaseConnector::createConnectionDetails","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/DatabaseDBC.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"DatabaseDBC Class — DatabaseDBC","text":"invisible(self)","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/DatabaseDBC.html","id":"method-query-","dir":"Reference","previous_headings":"","what":"Method query()","title":"DatabaseDBC Class — DatabaseDBC","text":"Query method query database using DatabaseConnector::renderTranslateQuerySql","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/DatabaseDBC.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"DatabaseDBC Class — DatabaseDBC","text":"","code":"DatabaseDBC$query(sql, ...)"},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/DatabaseDBC.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"DatabaseDBC Class — DatabaseDBC","text":"sql (character(1)) SQL Query ... Additional parameters DatabaseConnector::renderTranslateQuerySql","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/DatabaseDBC.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"DatabaseDBC Class — DatabaseDBC","text":"data.frame","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/DatabaseDBC.html","id":"method-execute-","dir":"Reference","previous_headings":"","what":"Method execute()","title":"DatabaseDBC Class — DatabaseDBC","text":"Execute method execute query database using DatabaseConnector::renderTranslateExecuteSql","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/DatabaseDBC.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"DatabaseDBC Class — DatabaseDBC","text":"","code":"DatabaseDBC$execute(sql, ...)"},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/DatabaseDBC.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"DatabaseDBC Class — DatabaseDBC","text":"sql (character(1)) SQL Query execute ... Additional parameters DatabaseConnector::renderTranslateExecuteSql","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/DatabaseDBC.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"DatabaseDBC Class — DatabaseDBC","text":"invisible(self)","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/DatabaseDBC.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"DatabaseDBC Class — DatabaseDBC","text":"objects class cloneable method.","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/DatabaseDBC.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"DatabaseDBC Class — DatabaseDBC","text":"","code":"DatabaseDBC$clone(deep = FALSE)"},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/DatabaseDBC.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"DatabaseDBC Class — DatabaseDBC","text":"deep Whether make deep clone.","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/DatabaseDBI.html","id":null,"dir":"Reference","previous_headings":"","what":"DatabaseDBI Class — DatabaseDBI","title":"DatabaseDBI Class — DatabaseDBI","text":"class extends Database class, query database using DBI ODBC.","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/DatabaseDBI.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"DatabaseDBI Class — DatabaseDBI","text":"DarwinShinyModules::ShinyModule -> DarwinShinyModules::Database -> DatabaseDBI","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/DatabaseDBI.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"DatabaseDBI Class — DatabaseDBI","text":"tables (list(n)) List tbl_dbi tables respective driver. connectArgs (list(n)) Named list additional arguments used DBI::dbConnect() disconnectArgs (list(n)) Named list additional arguments used DBI::dbDisconnect()","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/DatabaseDBI.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"DatabaseDBI Class — DatabaseDBI","text":"DarwinShinyModules::ShinyModule$UI() DarwinShinyModules::ShinyModule$server() DarwinShinyModules::ShinyModule$validate()","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/DatabaseDBI.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"DatabaseDBI Class — DatabaseDBI","text":"DatabaseDBI$new() DatabaseDBI$attachTables() DatabaseDBI$detatchTables() DatabaseDBI$clone()","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/DatabaseDBI.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"DatabaseDBI Class — DatabaseDBI","text":"Initializer method","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/DatabaseDBI.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DatabaseDBI Class — DatabaseDBI","text":"","code":"DatabaseDBI$new(driver)"},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/DatabaseDBI.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DatabaseDBI Class — DatabaseDBI","text":"driver Driver use connect database DBI::dbConnect()","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/DatabaseDBI.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"DatabaseDBI Class — DatabaseDBI","text":"invisible(self)","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/DatabaseDBI.html","id":"method-attachtables-","dir":"Reference","previous_headings":"","what":"Method attachTables()","title":"DatabaseDBI Class — DatabaseDBI","text":"Method attach tables database tables field.","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/DatabaseDBI.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"DatabaseDBI Class — DatabaseDBI","text":"","code":"DatabaseDBI$attachTables(...)"},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/DatabaseDBI.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"DatabaseDBI Class — DatabaseDBI","text":"... (character()) Names tables attach.","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/DatabaseDBI.html","id":"method-detatchtables-","dir":"Reference","previous_headings":"","what":"Method detatchTables()","title":"DatabaseDBI Class — DatabaseDBI","text":"Method detatch tables tables field.","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/DatabaseDBI.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"DatabaseDBI Class — DatabaseDBI","text":"","code":"DatabaseDBI$detatchTables(...)"},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/DatabaseDBI.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"DatabaseDBI Class — DatabaseDBI","text":"... (character()) Names tables detatch.","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/DatabaseDBI.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"DatabaseDBI Class — DatabaseDBI","text":"objects class cloneable method.","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/DatabaseDBI.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"DatabaseDBI Class — DatabaseDBI","text":"","code":"DatabaseDBI$clone(deep = FALSE)"},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/DatabaseDBI.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"DatabaseDBI Class — DatabaseDBI","text":"deep Whether make deep clone.","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/DatabaseOverview.html","id":null,"dir":"Reference","previous_headings":"","what":"DatabaseOverview Module Class — DatabaseOverview","title":"DatabaseOverview Module Class — DatabaseOverview","text":"DatabaseOverview module displays information data partners, links Portal data partner website.","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/DatabaseOverview.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"DatabaseOverview Module Class — DatabaseOverview","text":"DarwinShinyModules::ShinyModule -> DatabaseOverview","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/DatabaseOverview.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"DatabaseOverview Module Class — DatabaseOverview","text":"table (Table) Table module","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/DatabaseOverview.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"DatabaseOverview Module Class — DatabaseOverview","text":"DarwinShinyModules::ShinyModule$UI() DarwinShinyModules::ShinyModule$server() DarwinShinyModules::ShinyModule$validate()","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/DatabaseOverview.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"DatabaseOverview Module Class — DatabaseOverview","text":"DatabaseOverview$new() DatabaseOverview$clone()","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/DatabaseOverview.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"DatabaseOverview Module Class — DatabaseOverview","text":"Initializer method","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/DatabaseOverview.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DatabaseOverview Module Class — DatabaseOverview","text":"","code":"DatabaseOverview$new(...)"},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/DatabaseOverview.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DatabaseOverview Module Class — DatabaseOverview","text":"... (character(n)) Individual database names. See Details supported data partners.","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/DatabaseOverview.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"DatabaseOverview Module Class — DatabaseOverview","text":"\"APHM\" B \"BIFAP\" C \"CDW Bordeaux\"\"CPRD GOLD\" \"CRN\" D \"DK-DHR\" E \"EBB\"\"EMDB - ULSEDV\"\"EMDB - ULSGE\"\"EMDB - ULSRA\" F \"FinOMOP - ACI Varha\"\"FinOMOP - HILMO\"\"FinOMOP - HUS\"\"FinOMOP - TaUH Pirha\" H \"H12O\"\"HARMONY Platform\"\"HARMONY - \"\"HARMONY - AML\"\"HARMONY - CML\"\"HARMONY - MM\" \"IMASIS\"\"InGef RDB\"\"IPCI\"\"IQVIA DA Germany\"\"IQVIA LPD Belgium\" N \"NAJS\"\"NCR\"\"NLHR\"\"NLHR@UiO:PERINATAL\"\"NNRD\" P \"PGH\"\"PRISIB\"\"POLIMI\" S \"SIDIAP\"\"SNDS\"\"SUCD\" U \"UKBB\"\"ULSM-RT\" V \"VID\"","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/DatabaseOverview.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"DatabaseOverview Module Class — DatabaseOverview","text":"objects class cloneable method.","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/DatabaseOverview.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"DatabaseOverview Module Class — DatabaseOverview","text":"","code":"DatabaseOverview$clone(deep = FALSE)"},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/DatabaseOverview.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"DatabaseOverview Module Class — DatabaseOverview","text":"deep Whether make deep clone.","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/DatabaseOverview.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DatabaseOverview Module Class — DatabaseOverview","text":"","code":"library(DarwinShinyModules)  databaseOverview <- DatabaseOverview$new(\"IPCI\", \"CPRD GOLD\", \"SIDIAP\")  if (interactive()) {   preview(databaseOverview) }"},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/DrugExposureDiagnostics.html","id":null,"dir":"Reference","previous_headings":"","what":"DrugExposureDiagnostics Module Class — DrugExposureDiagnostics","title":"DrugExposureDiagnostics Module Class — DrugExposureDiagnostics","text":"DrugExposureDiagnostics module shows tables plots","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/DrugExposureDiagnostics.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"DrugExposureDiagnostics Module Class — DrugExposureDiagnostics","text":"module consists following: \"dataPlotPanel\" Table plot (bar box) check. \"metaDataPanel\" Table containing metadata.","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/DrugExposureDiagnostics.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"DrugExposureDiagnostics Module Class — DrugExposureDiagnostics","text":"DarwinShinyModules::ShinyModule -> DrugExposureDiagnostics","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/DrugExposureDiagnostics.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"DrugExposureDiagnostics Module Class — DrugExposureDiagnostics","text":"DarwinShinyModules::ShinyModule$UI() DarwinShinyModules::ShinyModule$server() DarwinShinyModules::ShinyModule$validate()","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/DrugExposureDiagnostics.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"DrugExposureDiagnostics Module Class — DrugExposureDiagnostics","text":"DrugExposureDiagnostics$new() DrugExposureDiagnostics$clone()","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/DrugExposureDiagnostics.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"DrugExposureDiagnostics Module Class — DrugExposureDiagnostics","text":"Initializer method","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/DrugExposureDiagnostics.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DrugExposureDiagnostics Module Class — DrugExposureDiagnostics","text":"","code":"DrugExposureDiagnostics$new(resultList, database_id = NULL)"},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/DrugExposureDiagnostics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DrugExposureDiagnostics Module Class — DrugExposureDiagnostics","text":"resultList (list) List containing output checks database_id (character) Database identifier (optional)","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/DrugExposureDiagnostics.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"DrugExposureDiagnostics Module Class — DrugExposureDiagnostics","text":"(invisible(self))","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/DrugExposureDiagnostics.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"DrugExposureDiagnostics Module Class — DrugExposureDiagnostics","text":"objects class cloneable method.","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/DrugExposureDiagnostics.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"DrugExposureDiagnostics Module Class — DrugExposureDiagnostics","text":"","code":"DrugExposureDiagnostics$clone(deep = FALSE)"},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/DrugExposureDiagnostics.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"DrugExposureDiagnostics Module Class — DrugExposureDiagnostics","text":"deep Whether make deep clone.","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/DrugExposureDiagnostics.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DrugExposureDiagnostics Module Class — DrugExposureDiagnostics","text":"","code":"{ library(DarwinShinyModules)  if (require(\"DrugExposureDiagnostics\", character.only = TRUE, quietly = TRUE, warn.conflicts = FALSE)) {   ded <- readRDS(system.file(package = \"DarwinShinyModules\",                              \"dummyData/DrugExposureDiagnostics/1.1.1/ded.rds\"))   mod <- DrugExposureDiagnostics$new(resultList = ded)   if (interactive()) {     preview(mod)   } } }"},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/GTTable.html","id":null,"dir":"Reference","previous_headings":"","what":"GTTable Module Class — GTTable","title":"GTTable Module Class — GTTable","text":"GTTable module displays tables using gt supported gt::render_gt() gt::gt_output().","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/GTTable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"GTTable Module Class — GTTable","text":"self","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/GTTable.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"GTTable Module Class — GTTable","text":"DarwinShinyModules::ShinyModule -> GTTable","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/GTTable.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"GTTable Module Class — GTTable","text":"fun (function) Function produce gt table , .e gt::gt. args (list) Arguments said function named list .e. list(data = iris).","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/GTTable.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"GTTable Module Class — GTTable","text":"DarwinShinyModules::ShinyModule$UI() DarwinShinyModules::ShinyModule$server() DarwinShinyModules::ShinyModule$validate()","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/GTTable.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"GTTable Module Class — GTTable","text":"GTTable$new() GTTable$clone()","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/GTTable.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"GTTable Module Class — GTTable","text":"Initializer method.","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/GTTable.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"GTTable Module Class — GTTable","text":"","code":"GTTable$new(fun, args)"},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/GTTable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"GTTable Module Class — GTTable","text":"fun (function) Function produce gt table , .e gt::gt. args (list()) Arguments said function named list .e. list(data = iris).","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/GTTable.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"GTTable Module Class — GTTable","text":"objects class cloneable method.","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/GTTable.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"GTTable Module Class — GTTable","text":"","code":"GTTable$clone(deep = FALSE)"},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/GTTable.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"GTTable Module Class — GTTable","text":"deep Whether make deep clone.","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/GTTable.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"GTTable Module Class — GTTable","text":"","code":"library(DarwinShinyModules)  gtTable <- GTTable$new(   fun = gt::gt,   args = list(data = iris) )  if(interactive()) {   preview(gtTable) }"},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/IncidencePrevalence.html","id":null,"dir":"Reference","previous_headings":"","what":"IncidencePrevalence Module Class — IncidencePrevalence","title":"IncidencePrevalence Module Class — IncidencePrevalence","text":"IncidencePrevalence module shows supports incidence; point period prevalence results IncidencePrevalence package.","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/IncidencePrevalence.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"IncidencePrevalence Module Class — IncidencePrevalence","text":"self","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/IncidencePrevalence.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"IncidencePrevalence Module Class — IncidencePrevalence","text":"module consists following: \"PlotPlotly\" Interactive Plotly plot, visualizing data. \"GTTable\" gttable visualizing tidy data \"GTTable\" gttable visualizing attirtion data \"Table\" basic table visualizing raw data","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/IncidencePrevalence.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"IncidencePrevalence Module Class — IncidencePrevalence","text":"DarwinShinyModules::ShinyModule -> IncidencePrevalence","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/IncidencePrevalence.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"IncidencePrevalence Module Class — IncidencePrevalence","text":"data (summarised_result) Summarised result object. dataType (character(1)) Assumed data type provided data. One : \"Incidence\", \"Point Prevalence\", \"Period Prevalence\" plotPlotly (PlotPlotly) Module. gtTable (GTTable) Module. gtAttrition (GTTable) Module. table (Table) Module.","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/IncidencePrevalence.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"IncidencePrevalence Module Class — IncidencePrevalence","text":"DarwinShinyModules::ShinyModule$UI() DarwinShinyModules::ShinyModule$server() DarwinShinyModules::ShinyModule$validate()","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/IncidencePrevalence.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"IncidencePrevalence Module Class — IncidencePrevalence","text":"IncidencePrevalence$new() IncidencePrevalence$clone()","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/IncidencePrevalence.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"IncidencePrevalence Module Class — IncidencePrevalence","text":"Initializer method","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/IncidencePrevalence.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"IncidencePrevalence Module Class — IncidencePrevalence","text":"","code":"IncidencePrevalence$new(data)"},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/IncidencePrevalence.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"IncidencePrevalence Module Class — IncidencePrevalence","text":"data (summarised_result) Result object IncidencePrevalence package.","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/IncidencePrevalence.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"IncidencePrevalence Module Class — IncidencePrevalence","text":"objects class cloneable method.","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/IncidencePrevalence.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"IncidencePrevalence Module Class — IncidencePrevalence","text":"","code":"IncidencePrevalence$clone(deep = FALSE)"},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/IncidencePrevalence.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"IncidencePrevalence Module Class — IncidencePrevalence","text":"deep Whether make deep clone.","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/IncidencePrevalence.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"IncidencePrevalence Module Class — IncidencePrevalence","text":"","code":"{ # \\donttest{  library(DarwinShinyModules)   if (    require(      \"IncidencePrevalence\",      character.only = TRUE,      quietly = TRUE,      warn.conflicts = FALSE    )  ) {     inc <- readRDS(system.file(       package = \"DarwinShinyModules\",       \"dummyData/IncidencePrevalence/0.9.0/incidence.rds\"     ))     pointPrev <- readRDS(system.file(       package = \"DarwinShinyModules\",       \"dummyData/IncidencePrevalence/0.9.0/pointPrevalence.rds\"     ))     periodPrev <- readRDS(system.file(       package = \"DarwinShinyModules\",       \"dummyData/IncidencePrevalence/0.9.0/periodPrevalence.rds\"     ))      incMod <- IncidencePrevalence$new(data = inc)     pointPrevMod <- IncidencePrevalence$new(data = pointPrev)     periodPrevMod <- IncidencePrevalence$new(data = periodPrev)      ui <- shiny::fluidPage(       incMod$UI(),       pointPrevMod$UI(),       periodPrevMod$UI()     )      server <- function(input, output, session) {       incMod$server(input, output, session)       pointPrevMod$server(input, output, session)       periodPrevMod$server(input, output, session)     }      if (interactive()) {       shiny::shinyApp(ui = ui, server = server)     }   } # } }"},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/InputPanel.html","id":null,"dir":"Reference","previous_headings":"","what":"InputPanel Module Class — InputPanel","title":"InputPanel Module Class — InputPanel","text":"InputPanel module handles inputs based input function like: shiny::selectInput(), shinyWidgets::pickerInput(), etc.","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/InputPanel.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"InputPanel Module Class — InputPanel","text":"assigned input values accessible reactive values inputValues field. modules may trigger reactive values .e. shiny::observeEvent().","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/InputPanel.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"InputPanel Module Class — InputPanel","text":"DarwinShinyModules::ShinyModule -> InputPanel","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/InputPanel.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"InputPanel Module Class — InputPanel","text":"parentNamespace (character(1)) Namespace parent module. funs (list()) Named list xInput functions used list(funA = shiny::selectInput). args (list()) Named list arguments used xInput functions list(funA = list(inputId = \"name\", label = \"name\")). inputValues (reactiveValues) Values passed input fields.","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/InputPanel.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"InputPanel Module Class — InputPanel","text":"DarwinShinyModules::ShinyModule$UI() DarwinShinyModules::ShinyModule$server()","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/InputPanel.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"InputPanel Module Class — InputPanel","text":"InputPanel$new() InputPanel$validate() InputPanel$clone()","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/InputPanel.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"InputPanel Module Class — InputPanel","text":"Initializer method","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/InputPanel.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"InputPanel Module Class — InputPanel","text":"","code":"InputPanel$new(funs, args)"},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/InputPanel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"InputPanel Module Class — InputPanel","text":"funs (list()) Named list xInput functions used list(funA = shiny::selectInput). args (list()) Named list arguments used xInput functions list(funA = list(inputId = \"name\", label = \"name\"))","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/InputPanel.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"InputPanel Module Class — InputPanel","text":"(invisible(self))","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/InputPanel.html","id":"method-validate-","dir":"Reference","previous_headings":"","what":"Method validate()","title":"InputPanel Module Class — InputPanel","text":"Validation method","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/InputPanel.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"InputPanel Module Class — InputPanel","text":"","code":"InputPanel$validate()"},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/InputPanel.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"InputPanel Module Class — InputPanel","text":"(self)","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/InputPanel.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"InputPanel Module Class — InputPanel","text":"objects class cloneable method.","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/InputPanel.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"InputPanel Module Class — InputPanel","text":"","code":"InputPanel$clone(deep = FALSE)"},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/InputPanel.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"InputPanel Module Class — InputPanel","text":"deep Whether make deep clone.","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/InputPanel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"InputPanel Module Class — InputPanel","text":"","code":"library(DarwinShinyModules)  inputPanel <- InputPanel$new(   funs = list(     select = shiny::selectInput,     text = shiny::textInput   ),   args = list(     select = list(inputId = \"select\", choices = c(\"a\", \"b\"), label = \"select\"),     text = list(inputId = \"text\", label = \"text\")   ) )  if (interactive()) {   preview(inputPanel) }"},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/OhdsiModule.html","id":null,"dir":"Reference","previous_headings":"","what":"OhdsiModule Class — OhdsiModule","title":"OhdsiModule Class — OhdsiModule","text":"OhdsiModule wraps around viewerX() serverX() function OhdsiShinyModules, running module stand-alone. setup also support module OhdsiShinyModules.","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/OhdsiModule.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"OhdsiModule Class — OhdsiModule","text":"self","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/OhdsiModule.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"OhdsiModule Class — OhdsiModule","text":"DarwinShinyModules::ShinyModule -> OhdsiModule","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/OhdsiModule.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"OhdsiModule Class — OhdsiModule","text":"connectionHandler (ConnectionHandler) ConnectionHandler object ResultModelManager. viewerFun (function) Viewer function use OhdsiShinyModules. serverFun (function) Server function use OhdsiShinyModules. resultDatabaseSettings (list) Named List table prefixes like ShinyAppBuilder::createDefaultResultDatabaseSettings() creates.","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/OhdsiModule.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"OhdsiModule Class — OhdsiModule","text":"DarwinShinyModules::ShinyModule$UI() DarwinShinyModules::ShinyModule$server() DarwinShinyModules::ShinyModule$validate()","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/OhdsiModule.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"OhdsiModule Class — OhdsiModule","text":"OhdsiModule$new() OhdsiModule$clone()","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/OhdsiModule.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"OhdsiModule Class — OhdsiModule","text":"Initializer method","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/OhdsiModule.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"OhdsiModule Class — OhdsiModule","text":"","code":"OhdsiModule$new(   connectionHandler,   viewerFun,   serverFun,   resultDatabaseSettings = ShinyAppBuilder::createDefaultResultDatabaseSettings() )"},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/OhdsiModule.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"OhdsiModule Class — OhdsiModule","text":"connectionHandler (ConnectionHandler) ConnectionHandler object ResultModelManager. viewerFun (function) Viewer function use OhdsiShinyModules. serverFun (function) Server function use OhdsiShinyModules. resultDatabaseSettings (list) Named List table prefixes like ShinyAppBuilder::createDefaultResultDatabaseSettings() creates.","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/OhdsiModule.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"OhdsiModule Class — OhdsiModule","text":"objects class cloneable method.","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/OhdsiModule.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"OhdsiModule Class — OhdsiModule","text":"","code":"OhdsiModule$clone(deep = FALSE)"},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/OhdsiModule.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"OhdsiModule Class — OhdsiModule","text":"deep Whether make deep clone.","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/OhdsiModule.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"OhdsiModule Class — OhdsiModule","text":"","code":"# \\donttest{ if (interactive()) {   library(DarwinShinyModules)   # library(DatabaseConnector)   # library(ResultModelManager)   # library(OhdsiShinyModules)   # library(ShinyAppBuilder)    connectionDetails <- createConnectionDetails(     dbms = \"sqlite\",     server = file.path(tempdir(), \"results.sqlite\")   )    connectionHandler <- ConnectionHandler$new(     connectionDetails = connectionDetails   )    estimation <- OhdsiModule$new(     connectionHandler = connectionHandler,     viewerFun = estimationViewer,     serverFun = estimationServer,     resultDatabaseSettings = createDefaultResultDatabaseSettings()   )    preview(estimation) } # }"},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/Plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Decorator Class — Plot","title":"Plot Decorator Class — Plot","text":"class decorator meant directly used, inherited modules, like PlotStaic, PlotWidget, PlotPlotly.","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/Plot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot Decorator Class — Plot","text":"inherited Plot modules evaluate provided function provided data object. add new plot type required inherit Plot class, override private .UI() .server() methods.","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/Plot.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"Plot Decorator Class — Plot","text":"DarwinShinyModules::ShinyModule -> Plot","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/Plot.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"Plot Decorator Class — Plot","text":"title (character(1)) Title use plot. fun Plotting function. args (reactiveValues) Arguments used plot. plot Plot object.","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/Plot.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Plot Decorator Class — Plot","text":"DarwinShinyModules::ShinyModule$UI() DarwinShinyModules::ShinyModule$server()","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/Plot.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Plot Decorator Class — Plot","text":"Plot$new() Plot$validate() Plot$clone()","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/Plot.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Plot Decorator Class — Plot","text":"initialize","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/Plot.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Decorator Class — Plot","text":"","code":"Plot$new(fun, args, title = \"Plot\")"},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/Plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Decorator Class — Plot","text":"fun (function()) Function plot . args (list) Named list arguments pass fun. title (character(1)) Title plot. set NULL, title shown.","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/Plot.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Plot Decorator Class — Plot","text":"self","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/Plot.html","id":"method-validate-","dir":"Reference","previous_headings":"","what":"Method validate()","title":"Plot Decorator Class — Plot","text":"Validator method","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/Plot.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Decorator Class — Plot","text":"","code":"Plot$validate()"},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/Plot.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"Plot Decorator Class — Plot","text":"(self)","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/Plot.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Plot Decorator Class — Plot","text":"objects class cloneable method.","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/Plot.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Decorator Class — Plot","text":"","code":"Plot$clone(deep = FALSE)"},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/Plot.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Decorator Class — Plot","text":"deep Whether make deep clone.","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/PlotPlotly.html","id":null,"dir":"Reference","previous_headings":"","what":"PlotPlotly Module Class — PlotPlotly","title":"PlotPlotly Module Class — PlotPlotly","text":"Plotly module handles plotly objects.","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/PlotPlotly.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"PlotPlotly Module Class — PlotPlotly","text":"Plotly exposes bindings interact plot programaticaly. Currently, plotly_selected binding supported module.","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/PlotPlotly.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"PlotPlotly Module Class — PlotPlotly","text":"DarwinShinyModules::ShinyModule -> DarwinShinyModules::Plot -> PlotPlotly","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/PlotPlotly.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"PlotPlotly Module Class — PlotPlotly","text":"plot (plotly) object. source (character) Source label plotly plot. bindings (reactivevalues) bindings plotly object.","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/PlotPlotly.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"PlotPlotly Module Class — PlotPlotly","text":"DarwinShinyModules::ShinyModule$UI() DarwinShinyModules::ShinyModule$server() DarwinShinyModules::Plot$initialize() DarwinShinyModules::Plot$validate()","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/PlotPlotly.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"PlotPlotly Module Class — PlotPlotly","text":"PlotPlotly$clone()","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/PlotPlotly.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"PlotPlotly Module Class — PlotPlotly","text":"objects class cloneable method.","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/PlotPlotly.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"PlotPlotly Module Class — PlotPlotly","text":"","code":"PlotPlotly$clone(deep = FALSE)"},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/PlotPlotly.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"PlotPlotly Module Class — PlotPlotly","text":"deep Whether make deep clone.","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/PlotPlotly.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"PlotPlotly Module Class — PlotPlotly","text":"","code":"library(DarwinShinyModules)  plotlyFun <- function(data) {   plotly::ggplotly(     ggplot(data = data, mapping = aes(x = Sepal.Length, y = Sepal.Width, color = Species)) +       geom_point() +       theme_bw()   ) }  plotlyModule <- PlotPlotly$new(fun = plotlyFun, args = list(data = iris))  if (interactive()) {   preview(plotlyModule) }"},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/PlotStatic.html","id":null,"dir":"Reference","previous_headings":"","what":"PlotStatic Module Class — PlotStatic","title":"PlotStatic Module Class — PlotStatic","text":"Static plot Module handles static plots like base::plot() function ggplot2 objects.","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/PlotStatic.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"PlotStatic Module Class — PlotStatic","text":"DarwinShinyModules::ShinyModule -> DarwinShinyModules::Plot -> PlotStatic","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/PlotStatic.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"PlotStatic Module Class — PlotStatic","text":"plot Plot object.","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/PlotStatic.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"PlotStatic Module Class — PlotStatic","text":"DarwinShinyModules::ShinyModule$UI() DarwinShinyModules::ShinyModule$server() DarwinShinyModules::Plot$initialize() DarwinShinyModules::Plot$validate()","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/PlotStatic.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"PlotStatic Module Class — PlotStatic","text":"PlotStatic$clone()","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/PlotStatic.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"PlotStatic Module Class — PlotStatic","text":"objects class cloneable method.","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/PlotStatic.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"PlotStatic Module Class — PlotStatic","text":"","code":"PlotStatic$clone(deep = FALSE)"},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/PlotStatic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"PlotStatic Module Class — PlotStatic","text":"deep Whether make deep clone.","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/PlotStatic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"PlotStatic Module Class — PlotStatic","text":"","code":"library(DarwinShinyModules) library(ggplot2)  staticFun <- function(data) {   ggplot(data = data, mapping = aes(x = Sepal.Length, y = Sepal.Width, color = Species)) +     geom_point() +     theme_bw() }  staticModule <- PlotStatic$new(fun = staticFun, args = list(data = iris))  if (interactive()) {   preview(staticModule) }"},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/PlotWidget.html","id":null,"dir":"Reference","previous_headings":"","what":"PlotWidget Module Class — PlotWidget","title":"PlotWidget Module Class — PlotWidget","text":"Widget module handles htmlwidget objects.","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/PlotWidget.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"PlotWidget Module Class — PlotWidget","text":"DarwinShinyModules::ShinyModule -> DarwinShinyModules::Plot -> PlotWidget","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/PlotWidget.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"PlotWidget Module Class — PlotWidget","text":"DarwinShinyModules::ShinyModule$UI() DarwinShinyModules::ShinyModule$server() DarwinShinyModules::Plot$initialize() DarwinShinyModules::Plot$validate()","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/PlotWidget.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"PlotWidget Module Class — PlotWidget","text":"PlotWidget$clone()","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/PlotWidget.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"PlotWidget Module Class — PlotWidget","text":"objects class cloneable method.","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/PlotWidget.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"PlotWidget Module Class — PlotWidget","text":"","code":"PlotWidget$clone(deep = FALSE)"},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/PlotWidget.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"PlotWidget Module Class — PlotWidget","text":"deep Whether make deep clone.","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/PlotWidget.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"PlotWidget Module Class — PlotWidget","text":"","code":"library(DarwinShinyModules)  nD3Installed <- require( \"networkD3\", character.only = TRUE, quietly = TRUE, warn.conflicts = FALSE )  if (nD3Installed) {   src <- c(     \"A\", \"A\", \"A\", \"A\",     \"B\", \"B\", \"C\", \"C\", \"D\"   )   target <- c(     \"B\", \"C\", \"D\", \"J\",     \"E\", \"F\", \"G\", \"H\", \"I\"   )    widgetModule <- PlotWidget$new(fun = simpleNetwork, args = list(Data = data.frame(src, target)))    if (interactive()) {     preview(widgetModule)   } }"},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/ShinyModule.html","id":null,"dir":"Reference","previous_headings":"","what":"Module Decorator Class — ShinyModule","title":"Module Decorator Class — ShinyModule","text":"class decorator meant directly used, inherited Modules.","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/ShinyModule.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Module Decorator Class — ShinyModule","text":"Namespacing ShinyModule class manages namespacing moduleName instanceId, create moduleId. moduleId parentNamespace (module nested another module) make namespace field. Server method creating new module, id shiny::moduleServer() set moduleId field. Besides setting id, initServer() method called start shiny::moduleServer(). initializes reactive environment used freely developing modules. method may expanded upon initialize namespace dependant features. done class self, public server() method. server() method calls private private$.server(), overridden creating module. example: public server() method overridden error thrown: UI method accessing outputId UI, namespace field used reference correct namespace shiny::NS(). also expected UI() method returns contents shown, multiple things shown, nested , exmaple, shiny::taglist(). example: public UI() method overridden error thrown:","code":"moduleId = moduleName-instanceId   namespace = [parentNamespace-]moduleId ... private = list(   .server = function(input, output, session) {     output$table <- shiny::renderTable(iris)   } ) ... ... public = list(   server = function(input, output, session) {     output$table <- shiny::renderTable(iris)   } ) ...  myModule <- MyModule$new() #> `self$server()` was overridden in `public = list(...)` override `private$.server()` instead in `private = list(.server = function(input, output, session) {})` ... private = list(   .UI = function() {     # `private$.namespace` would also be valid.     shiny::tableOutput(outputId = shiny::NS(self$namespace, \"table\"))   } ) ... public = list(   server = function(input, output, session) {     output$table <- shiny::renderTable(iris)   } ) ...  myModule <- MyModule$new() #> `self$UI()` was overridden in `public = list(...)` override `private$.UI()` instead in `private = list(.UI = function() {})`"},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/ShinyModule.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"Module Decorator Class — ShinyModule","text":"instanceId (character(1)) Random ID 10 capitalized letters. parentNamespace (character(1)) Namespace parent module. moduleName (character(1)) Name module. moduleId (character(1)) Module identifier, composed like: moduleName-instanceId namespace (character(1)) Namespace, composed like: [parentNamespace-]moduleName-instanceId parentNamespace optional reactiveValues (reactivevalues) Reactive values. use shiny::isolate() get non-reactive item reactive environment. async (logical(1): FALSE) Logical parameter switch asynchronous mode .","code":""},{"path":[]},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/ShinyModule.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Module Decorator Class — ShinyModule","text":"ShinyModule$new() ShinyModule$validate() ShinyModule$UI() ShinyModule$server() ShinyModule$clone()","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/ShinyModule.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Module Decorator Class — ShinyModule","text":"Initializer method","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/ShinyModule.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Module Decorator Class — ShinyModule","text":"","code":"ShinyModule$new()"},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/ShinyModule.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Module Decorator Class — ShinyModule","text":"(self)","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/ShinyModule.html","id":"method-validate-","dir":"Reference","previous_headings":"","what":"Method validate()","title":"Module Decorator Class — ShinyModule","text":"Validator method","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/ShinyModule.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Module Decorator Class — ShinyModule","text":"","code":"ShinyModule$validate()"},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/ShinyModule.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"Module Decorator Class — ShinyModule","text":"(self)","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/ShinyModule.html","id":"method-ui-","dir":"Reference","previous_headings":"","what":"Method UI()","title":"Module Decorator Class — ShinyModule","text":"Method include tagList include body.","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/ShinyModule.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Module Decorator Class — ShinyModule","text":"","code":"ShinyModule$UI()"},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/ShinyModule.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"Module Decorator Class — ShinyModule","text":"(tagList)","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/ShinyModule.html","id":"method-server-","dir":"Reference","previous_headings":"","what":"Method server()","title":"Module Decorator Class — ShinyModule","text":"Method handle back-end.","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/ShinyModule.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Module Decorator Class — ShinyModule","text":"","code":"ShinyModule$server(input, output, session)"},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/ShinyModule.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Module Decorator Class — ShinyModule","text":"input (input) Input server function. output (output) Output server function. session (session) Session server function.","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/ShinyModule.html","id":"returns-3","dir":"Reference","previous_headings":"","what":"Returns","title":"Module Decorator Class — ShinyModule","text":"(NULL)","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/ShinyModule.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Module Decorator Class — ShinyModule","text":"objects class cloneable method.","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/ShinyModule.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Module Decorator Class — ShinyModule","text":"","code":"ShinyModule$clone(deep = FALSE)"},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/ShinyModule.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Module Decorator Class — ShinyModule","text":"deep Whether make deep clone.","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/ShinyModule.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Module Decorator Class — ShinyModule","text":"","code":"MyModule <- R6::R6Class(   classname = \"MyModule\",   inherit = ShinyModule,    private = list(     .UI = function() {       # `private$.namespace` would also be valid.       shiny::tableOutput(outputId = shiny::NS(self$namespace, \"table\"))     },      # Override server()     .server = function(input, output, session) {       output$table <- shiny::renderTable(iris)     }   ) )  if (interactive()) {   myModule <- MyModule$new()   preview(myModule) }  # The following would throw an error for overwritnig the public UI() and server() methods: MyModule <- R6::R6Class(   classname = \"MyModule\",   inherit = ShinyModule,    public = list(     UI = function() {       # `private$.namespace` would also be valid.       shiny::tableOutput(outputId = shiny::NS(self$namespace, \"table\"))     },      # Override server()     server = function(input, output, session) {       output$table <- shiny::renderTable(iris)     }   ) )  tryCatch({   myModule <- MyModule$new() }, error = function(e) {   message(e) }) #> Error in private$checkMethodOverrides(): `self$server()` was overridden in `public = list(...)` override `private$.server()` instead in `private = list(.server = function(input, output, session) {})` #>   `self$UI()` was overridden in `public = list(...)` override `private$.UI()` instead in `private = list(.UI = function() {})` #> `self$server()` was overridden in `public = list(...)` override #> `private$.server()` instead in #> `private = list(.server = function(input,output, session) {})`  #> `self$UI()` was overridden in `public = list(...)` override #> `private$.UI()` instead in `private = list(.UI = function() {})`"},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/StudyBackground.html","id":null,"dir":"Reference","previous_headings":"","what":"StudyBackground — StudyBackground","title":"StudyBackground — StudyBackground","text":"StudyBackground Module contains background information EUPAS.","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/StudyBackground.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"StudyBackground — StudyBackground","text":"invisible(self)","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/StudyBackground.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"StudyBackground — StudyBackground","text":"DarwinShinyModules::ShinyModule -> StudyBackground","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/StudyBackground.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"StudyBackground — StudyBackground","text":"background (character(n)) Either direct background, contents markdown (.md) file. EUPAS (character(1)) EUPAS belonging study. text (Text) Text module.","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/StudyBackground.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"StudyBackground — StudyBackground","text":"DarwinShinyModules::ShinyModule$UI() DarwinShinyModules::ShinyModule$server() DarwinShinyModules::ShinyModule$validate()","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/StudyBackground.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"StudyBackground — StudyBackground","text":"StudyBackground$new() StudyBackground$clone()","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/StudyBackground.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"StudyBackground — StudyBackground","text":"initializer method","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/StudyBackground.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"StudyBackground — StudyBackground","text":"","code":"StudyBackground$new(background, EUPAS)"},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/StudyBackground.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"StudyBackground — StudyBackground","text":"background (character(n)) Either direct background description file path pointing markdown (.md) file. EUPAS (character(1)) EUPAS belonging study.","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/StudyBackground.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"StudyBackground — StudyBackground","text":"objects class cloneable method.","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/StudyBackground.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"StudyBackground — StudyBackground","text":"","code":"StudyBackground$clone(deep = FALSE)"},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/StudyBackground.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"StudyBackground — StudyBackground","text":"deep Whether make deep clone.","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/StudyBackground.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"StudyBackground — StudyBackground","text":"","code":"library(DarwinShinyModules)  studyBackground <- StudyBackground$new(   background = \"./background.md\",   EUPAS = \"EUPAS9999999\" )  if (interactive()) {   preview(studyBackground) }"},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/Table.html","id":null,"dir":"Reference","previous_headings":"","what":"Table Module Class — Table","title":"Table Module Class — Table","text":"Table module displays data.frame like objects table supported DT::renderDT() DT::DTOutput().","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/Table.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Table Module Class — Table","text":"Table module exposes reactive bindings datatable object DT, bindings field. bindings : cell_clicked cells_selected cell_info rows_current rows_all rows_selected row_last_clicked columns_selected search search_columns state bindings allow trigger events .e. shiny::observeEvent() another module. full description exposed bindings, consult DT documentation: https://rstudio.github.io/DT/shiny.html","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/Table.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"Table Module Class — Table","text":"DarwinShinyModules::ShinyModule -> Table","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/Table.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"Table Module Class — Table","text":"bindings (reactiveValues) Reactive bindings DT::datatable. data (data.frame) Reactive data, use shiny::isolate() get non-reactive data. title (character) Title table. options (list(n)) List options used DT::datatable. filter (character(1)) Filter option used DT::datatable.","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/Table.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Table Module Class — Table","text":"DarwinShinyModules::ShinyModule$UI() DarwinShinyModules::ShinyModule$server()","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/Table.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Table Module Class — Table","text":"Table$new() Table$validate() Table$clone()","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/Table.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Table Module Class — Table","text":"initialize","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/Table.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Table Module Class — Table","text":"","code":"Table$new(   data,   title = \"Table\",   options = list(scrollX = TRUE),   filter = \"top\" )"},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/Table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Table Module Class — Table","text":"data (data.frame) Data plot , usually data.frame-like object. title (character(1)) Title table. set NULL, title shown. options (list) table options, default shows additional items next table like search box, pagination, etc. display table using list(dom = ”) filter (character: \"top\") filter option, can either \"none\", \"bottom\" \"top\" (default)","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/Table.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Table Module Class — Table","text":"self","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/Table.html","id":"method-validate-","dir":"Reference","previous_headings":"","what":"Method validate()","title":"Table Module Class — Table","text":"validate","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/Table.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Table Module Class — Table","text":"","code":"Table$validate()"},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/Table.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"Table Module Class — Table","text":"self","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/Table.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Table Module Class — Table","text":"objects class cloneable method.","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/Table.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Table Module Class — Table","text":"","code":"Table$clone(deep = FALSE)"},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/Table.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Table Module Class — Table","text":"deep Whether make deep clone.","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/Table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Table Module Class — Table","text":"","code":"library(DarwinShinyModules)  table <- Table$new(data = mtcars)  if (interactive()) {   preview(table) }"},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/Text.html","id":null,"dir":"Reference","previous_headings":"","what":"Text — Text","title":"Text — Text","text":"Text Module","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/Text.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"Text — Text","text":"DarwinShinyModules::ShinyModule -> Text","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/Text.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"Text — Text","text":"markdown (character(n)) Lines read markdown-file supplied.","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/Text.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Text — Text","text":"DarwinShinyModules::ShinyModule$UI() DarwinShinyModules::ShinyModule$server()","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/Text.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Text — Text","text":"Text$new() Text$validate() Text$clone()","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/Text.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Text — Text","text":"initialize","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/Text.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Text — Text","text":"","code":"Text$new(markdown)"},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/Text.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Text — Text","text":"markdown (character(n)) Markdown.","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/Text.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Text — Text","text":"self","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/Text.html","id":"method-validate-","dir":"Reference","previous_headings":"","what":"Method validate()","title":"Text — Text","text":"Validator method","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/Text.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Text — Text","text":"","code":"Text$validate()"},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/Text.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"Text — Text","text":"(self)","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/Text.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Text — Text","text":"objects class cloneable method.","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/Text.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Text — Text","text":"","code":"Text$clone(deep = FALSE)"},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/Text.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Text — Text","text":"deep Whether make deep clone.","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/Text.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Text — Text","text":"","code":"library(DarwinShinyModules)  md <- c(   \"# H1   ## H2   ### H3\",    \"**bold text**\",    \"*italicized text*\",    \"> blockquote\",    \"1. First item   2. Second item   3. Third item\",    \"- First item   - Second item   - Third item\",    \"`code`\",    \"---\",    \"[link](https://www.markdownguide.org/cheat-sheet/)\",    \"![alt text](https://mdg.imgix.net/assets/images/    san-juan-mountains.jpg?auto=format&fit=clip&q=40&w=1080)\",    \"| Syntax | Description |   | ----------- | ----------- |   | Header | Title |   | Paragraph | Text |\",    \"```r     foo <- function(bar, baz) {       return(bar ** baz)     }      foo(2, 3)   ```\",    \"  Here's a sentence with a footnote. [^1]    [^1]: This is the footnote.\",    \"### My Great Heading {#custom-id}\",    \"term   : definition\",    \"~~The world is flat.~~\",    \"- [x] Write the press release   - [ ] Update the website   - [ ] Contact the media\",    \"That is so funny! :joy:\",    \"I need to highlight these ==very important words==.\",   \"H~2~O\",   \"X^2^\" )  text <- Text$new(markdown = md)  if (interactive()) {   preview(module = text) }"},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/TreatmentPatterns.html","id":null,"dir":"Reference","previous_headings":"","what":"TreatmentPatterns Module Class — TreatmentPatterns","title":"TreatmentPatterns Module Class — TreatmentPatterns","text":"TreatmentPatterns module shows Sunburst plot Sankey diagram, table.","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/TreatmentPatterns.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"TreatmentPatterns Module Class — TreatmentPatterns","text":"module consists following: \"InputPanel\" Input panel filter data. \"PlotWidget\" Sunburst Plot, visualizing data. \"PlotWidget\" Sankey Diagram, visualizing data. \"Table\" Table containing data.","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/TreatmentPatterns.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"TreatmentPatterns Module Class — TreatmentPatterns","text":"DarwinShinyModules::ShinyModule -> TreatmentPatterns","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/TreatmentPatterns.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"TreatmentPatterns Module Class — TreatmentPatterns","text":"sankeyCols (list(= \"#ff33cc\")) Colours Sankey diagram. sunburstCols (list(domain = list(), range = list())) Colours Sunburst plot.","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/TreatmentPatterns.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"TreatmentPatterns Module Class — TreatmentPatterns","text":"DarwinShinyModules::ShinyModule$UI() DarwinShinyModules::ShinyModule$server() DarwinShinyModules::ShinyModule$validate()","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/TreatmentPatterns.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"TreatmentPatterns Module Class — TreatmentPatterns","text":"TreatmentPatterns$new() TreatmentPatterns$clone()","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/TreatmentPatterns.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"TreatmentPatterns Module Class — TreatmentPatterns","text":"Initializer method","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/TreatmentPatterns.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"TreatmentPatterns Module Class — TreatmentPatterns","text":"","code":"TreatmentPatterns$new(treatmentPathways)"},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/TreatmentPatterns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"TreatmentPatterns Module Class — TreatmentPatterns","text":"treatmentPathways (data.frame) Contents treatmentPathways.csv file export() function TreatmentPatterns.","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/TreatmentPatterns.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"TreatmentPatterns Module Class — TreatmentPatterns","text":"(invisible(self))","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/TreatmentPatterns.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"TreatmentPatterns Module Class — TreatmentPatterns","text":"objects class cloneable method.","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/TreatmentPatterns.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"TreatmentPatterns Module Class — TreatmentPatterns","text":"","code":"TreatmentPatterns$clone(deep = FALSE)"},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/TreatmentPatterns.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"TreatmentPatterns Module Class — TreatmentPatterns","text":"deep Whether make deep clone.","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/TreatmentPatterns.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"TreatmentPatterns Module Class — TreatmentPatterns","text":"","code":"{ library(DarwinShinyModules)  if (require(\"TreatmentPatterns\", character.only = TRUE, quietly = TRUE, warn.conflicts = FALSE)) {    tp <- data.frame(     path = c(\"A+B-C\", \"B+C-A\", \"B-A+C\"),     freq = 100,     sex = \"all\",     age = \"all\",     indexYear = \"all\"   )    treatmentPathways <- TreatmentPatterns$new(treatmentPathways = tp)    if (interactive()) {     preview(treatmentPathways)   } } }"},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/launchBslibApp.html","id":null,"dir":"Reference","previous_headings":"","what":"launchBslibApp — launchBslibApp","title":"launchBslibApp — launchBslibApp","text":"launchBslibApp","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/launchBslibApp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"launchBslibApp — launchBslibApp","text":"","code":"launchBslibApp(appStructure, title = NULL, async = FALSE)"},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/launchBslibApp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"launchBslibApp — launchBslibApp","text":"appStructure (list(list())) list named lists, containing modules. level nesting groups separates modules menu items \"_\" read space. title (character(1): NULL) Title app async (logical(1): FALSE) Run app asynchronously","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/launchBslibApp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"launchBslibApp — launchBslibApp","text":"NULL","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/launchBslibApp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"launchBslibApp — launchBslibApp","text":"","code":"library(DarwinShinyModules)  base <- Text$new(\"**base**\") nested_a <- Text$new(\"**nested A**\") nested_b <- Text$new(\"**nested B**\") sub_a <- Text$new(\"**sub A**\") sub_b <- Text$new(\"**sub B**\") comb_a <- Text$new(\"**comb A**\") comb_b <- Text$new(\"**comb B**\") comb_c <- Text$new(\"**comb C**\")  if (interactive()) {   appStructure <- list(     base = base,     nested = list(nested_a, nested_b),     nested_sub = list(       sub_a = sub_a,       sub_b = sub_b     ),     nested_combined = list(       comb_a_b = list(comb_a, comb_b),       comb_c = comb_c     )   )    launchBslibApp(appStructure) }"},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/launchDarwinBslibApp.html","id":null,"dir":"Reference","previous_headings":"","what":"launchDarwinBslibApp — launchDarwinBslibApp","title":"launchDarwinBslibApp — launchDarwinBslibApp","text":"launchDarwinBslibApp","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/launchDarwinBslibApp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"launchDarwinBslibApp — launchDarwinBslibApp","text":"","code":"launchDarwinBslibApp(appStructure, title = NULL, async = FALSE)"},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/launchDarwinBslibApp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"launchDarwinBslibApp — launchDarwinBslibApp","text":"appStructure (list(list())) list named lists, containing modules. level nesting groups separates modules menu items \"_\" read space. title (character(1): NULL) Title app async (logical(1): FALSE) Run app asynchronously","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/launchDarwinBslibApp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"launchDarwinBslibApp — launchDarwinBslibApp","text":"NULL","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/launchDarwinBslibApp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"launchDarwinBslibApp — launchDarwinBslibApp","text":"","code":"library(DarwinShinyModules)  base <- Text$new(\"**base**\") nested_a <- Text$new(\"**nested A**\") nested_b <- Text$new(\"**nested B**\") sub_a <- Text$new(\"**sub A**\") sub_b <- Text$new(\"**sub B**\") comb_a <- Text$new(\"**comb A**\") comb_b <- Text$new(\"**comb B**\") comb_c <- Text$new(\"**comb C**\")  if (interactive()) {   appStructure <- list(     base = base,     nested = list(nested_a, nested_b),     nested_sub = list(       sub_a = sub_a,       sub_b = sub_b     ),     nested_combined = list(       comb_a_b = list(comb_a, comb_b),       comb_c = comb_c     )   )    launchDarwinBslibApp(appStructure) }"},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/launchDarwinDashboardApp.html","id":null,"dir":"Reference","previous_headings":"","what":"launchDarwinDashboardApp — launchDarwinDashboardApp","title":"launchDarwinDashboardApp — launchDarwinDashboardApp","text":"launchDarwinDashboardApp","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/launchDarwinDashboardApp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"launchDarwinDashboardApp — launchDarwinDashboardApp","text":"","code":"launchDarwinDashboardApp(appStructure, title = NULL, async = FALSE)"},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/launchDarwinDashboardApp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"launchDarwinDashboardApp — launchDarwinDashboardApp","text":"appStructure (list(list())) list named lists, containing modules. level nesting groups separates modules menu items \"_\" read space. title (character(1): NULL) Title app async (logical(1): FALSE) Run app asynchronously","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/launchDarwinDashboardApp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"launchDarwinDashboardApp — launchDarwinDashboardApp","text":"NULL","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/launchDarwinDashboardApp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"launchDarwinDashboardApp — launchDarwinDashboardApp","text":"","code":"library(DarwinShinyModules)  base <- Text$new(\"**base**\") nested_a <- Text$new(\"**nested A**\") nested_b <- Text$new(\"**nested B**\") sub_a <- Text$new(\"**sub A**\") sub_b <- Text$new(\"**sub B**\") comb_a <- Text$new(\"**comb A**\") comb_b <- Text$new(\"**comb B**\") comb_c <- Text$new(\"**comb C**\")  if (interactive()) {   appStructure <- list(     base = base,     nested = list(nested_a, nested_b),     nested_sub = list(       sub_a = sub_a,       sub_b = sub_b     ),     nested_combined = list(       comb_a_b = list(comb_a, comb_b),       comb_c = comb_c     )   )    launchDarwinDashboardApp(appStructure) }"},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/launchShinydashboardApp.html","id":null,"dir":"Reference","previous_headings":"","what":"launchShinydashboardApp — launchShinydashboardApp","title":"launchShinydashboardApp — launchShinydashboardApp","text":"launchShinydashboardApp","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/launchShinydashboardApp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"launchShinydashboardApp — launchShinydashboardApp","text":"","code":"launchShinydashboardApp(appStructure, title = NULL, async = FALSE)"},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/launchShinydashboardApp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"launchShinydashboardApp — launchShinydashboardApp","text":"appStructure (list(list())) list named lists, containing modules. level nesting groups separates modules menu items \"_\" read space. title (character(1): NULL) Title app async (logical(1): FALSE) Run app asynchronously","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/launchShinydashboardApp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"launchShinydashboardApp — launchShinydashboardApp","text":"NULL","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/launchShinydashboardApp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"launchShinydashboardApp — launchShinydashboardApp","text":"","code":"library(DarwinShinyModules)  base <- Text$new(\"**base**\") nested_a <- Text$new(\"**nested A**\") nested_b <- Text$new(\"**nested B**\") sub_a <- Text$new(\"**sub A**\") sub_b <- Text$new(\"**sub B**\") comb_a <- Text$new(\"**comb A**\") comb_b <- Text$new(\"**comb B**\") comb_c <- Text$new(\"**comb C**\")  if (interactive()) {   appStructure <- list(     base = base,     nested = list(nested_a, nested_b),     nested_sub = list(       sub_a = sub_a,       sub_b = sub_b     ),     nested_combined = list(       comb_a_b = list(comb_a, comb_b),       comb_c = comb_c     )   )    launchShinydashboardApp(appStructure) }"},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/makeModule.html","id":null,"dir":"Reference","previous_headings":"","what":"makeModule — makeModule","title":"makeModule — makeModule","text":"Function make ShinyModule UI element server function.","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/makeModule.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"makeModule — makeModule","text":"","code":"makeModule(ui, server, namespace = NULL)"},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/makeModule.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"makeModule — makeModule","text":"ui Shiny UI elements .e. shiny.tag.list, similar ui objects packages like shiny, shinydashboard, bslib server (function) server function atleast input output argument. namespace (character: NULL) Namespace used ui element.","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/makeModule.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"makeModule — makeModule","text":"ShinyModule","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/makeModule.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"makeModule — makeModule","text":"function allows easy migration bespoke shiny code modular framework DarwinShinyModules, without implement R6 class. One caveat , generated module completely isolated. Meaning module allow modules read write defined (reactive) variables provided server function.","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/makeModule.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"makeModule — makeModule","text":"","code":"library(DarwinShinyModules) library(shiny)  ui <- tagList(p(\"My UI\")) server <- function(input, output, session) {   # Do stuff }  mod <- makeModule(ui, server)  if (interactive()) {   preview(mod) }"},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/preview.html","id":null,"dir":"Reference","previous_headings":"","what":"Preview — preview","title":"Preview — preview","text":"Launches shiny app modules' server() UI() methods.","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/preview.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Preview — preview","text":"","code":"preview(modules)"},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/preview.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Preview — preview","text":"modules (ShinyModule) vector module objects.","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/preview.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Preview — preview","text":"NULL","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/reference/preview.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Preview — preview","text":"","code":"table <- Table$new(data = iris)  if (interactive()) {   preview(table) }"},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/news/index.html","id":"darwinshinymodules-011","dir":"Changelog","previous_headings":"","what":"DarwinShinyModules 0.1.1","title":"DarwinShinyModules 0.1.1","text":"Added NEWS.md file. Fixed bug unloading plots session refreshes. Added DrugExposureDiagnostics module. Added builder function using bslib. Added last updated date footer. Added copyright. Added makeModule() function. Fixed vignette outputs.","code":""},{"path":"https://darwin-eu-dev.github.io/DarwinShinyModules/news/index.html","id":"darwinshinymodules-010","dir":"Changelog","previous_headings":"","what":"DarwinShinyModules 0.1.0","title":"DarwinShinyModules 0.1.0","text":"Initial release","code":""}]
