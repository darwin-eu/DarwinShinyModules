% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ShinyModule.R
\name{ShinyModule}
\alias{ShinyModule}
\title{Module Decorator Class}
\description{
This class is a \code{decorator} and is not meant to be directly used, but to be
inherited by other Modules.
}
\details{
\strong{Namespacing}\cr
The \code{ShinyModule} class manages namespacing with the \code{moduleName} and
\code{instanceId}, to create a \code{moduleId}. The \code{moduleId} and \code{parentNamespace}
(when a module is nested in another module) make up the \code{namespace} field.

\preformatted{
  moduleId = moduleName-instanceId
  namespace = [parentNamespace-]moduleId
}

\strong{Server method}\cr
When creating a new module, the \code{id} in \code{shiny::moduleServer()} is set to
the \code{moduleId} field.

Besides setting the \code{id}, the \code{initServer()} method is called at the start of
\code{shiny::moduleServer()}. This initializes a reactive environment to be used
freely when developing modules. This method may be expanded upon to
initialize other namespace dependant features.

All of this is done by the class it self, in the public \code{server()} method.
The \code{server()} method calls the private \code{private$.server()}, which should
overridden when creating a module.

As an example:
\preformatted{
...
private = list(
  .server = function(input, output, session) {
    output$table <- shiny::renderTable(iris)
  }
)
...
}

If the public \code{server()} method is overridden an error will be thrown:
\preformatted{
...
public = list(
  server = function(input, output, session) {
    output$table <- shiny::renderTable(iris)
  }
)
...

myModule <- MyModule$new()
#> `self$server()` was overridden in `public = list(...)` override `private$.server()` instead in `private = list(.server = function(input, output, session) {})`
}

\strong{UI method}\cr
When accessing an \code{outputId} in the UI, the \code{namespace} field is used to
reference the correct namespace with \code{shiny::NS()}.

It is also expected that the \code{UI()} method returns all contents to be shown,
so if multiple things should be shown, they should be nested in, as an
exmaple, \code{shiny::taglist()}.

As an example:
\preformatted{
...
private = list(
  .UI = function() {
    # `private$.namespace` would also be valid.
    shiny::tableOutput(outputId = shiny::NS(self$namespace, "table"))
  }
)
}

If the public \code{UI()} method is overridden an error will be thrown:
\preformatted{
...
public = list(
  server = function(input, output, session) {
    output$table <- shiny::renderTable(iris)
  }
)
...

myModule <- MyModule$new()
#> `self$UI()` was overridden in `public = list(...)` override `private$.UI()` instead in `private = list(.UI = function() {})`
}
}
\examples{
MyModule <- R6::R6Class(
  classname = "MyModule",
  inherit = ShinyModule,
  private = list(
    .UI = function() {
      # `private$.namespace` would also be valid.
      shiny::tableOutput(outputId = shiny::NS(self$namespace, "table"))
    },

    # Override server()
    .server = function(input, output, session) {
      output$table <- shiny::renderTable(iris)
    }
  )
)

if (interactive()) {
  myModule <- MyModule$new()
  preview(myModule)
}

# The following would throw an error for overwritnig the public UI() and server() methods:
MyModule <- R6::R6Class(
  classname = "MyModule",
  inherit = ShinyModule,
  public = list(
    UI = function() {
      # `private$.namespace` would also be valid.
      shiny::tableOutput(outputId = shiny::NS(self$namespace, "table"))
    },

    # Override server()
    server = function(input, output, session) {
      output$table <- shiny::renderTable(iris)
    }
  )
)

tryCatch(
  {
    myModule <- MyModule$new()
  },
  error = function(e) {
    message(e)
  }
)
#> `self$server()` was overridden in `public = list(...)` override
#> `private$.server()` instead in
#> `private = list(.server = function(input,output, session) {})`

#> `self$UI()` was overridden in `public = list(...)` override
#> `private$.UI()` instead in `private = list(.UI = function() {})`
}
\section{Active bindings}{
\if{html}{\out{<div class="r6-active-bindings">}}
\describe{
\item{\code{instanceId}}{(\code{character(1)}) Random ID of 10 capitalized letters.}

\item{\code{parentNamespace}}{(\code{character(1)}) Namespace of the parent module.}

\item{\code{moduleName}}{(\code{character(1)}) Name of the module.}

\item{\code{moduleId}}{(\code{character(1)}) Module identifier, composed like:
\code{moduleName-instanceId}}

\item{\code{namespace}}{(\code{character(1)}) Namespace, composed like:
\verb{[parentNamespace-]moduleName-instanceId} where \code{parentNamespace} is
optional}

\item{\code{reactiveValues}}{(\code{reactivevalues}) Reactive values. use
\code{shiny::isolate()} to get a non-reactive item from the reactive
environment.}

\item{\code{async}}{(\code{logical(1)}: \code{FALSE}) Logical parameter to switch
asynchronous mode on or off.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-ShinyModule-new}{\code{ShinyModule$new()}}
\item \href{#method-ShinyModule-validate}{\code{ShinyModule$validate()}}
\item \href{#method-ShinyModule-getReactiveValues}{\code{ShinyModule$getReactiveValues()}}
\item \href{#method-ShinyModule-UI}{\code{ShinyModule$UI()}}
\item \href{#method-ShinyModule-server}{\code{ShinyModule$server()}}
\item \href{#method-ShinyModule-clone}{\code{ShinyModule$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ShinyModule-new"></a>}}
\if{latex}{\out{\hypertarget{method-ShinyModule-new}{}}}
\subsection{Method \code{new()}}{
Initializer method
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ShinyModule$new(...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{Additional parameters to set fields.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
(\code{self})
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ShinyModule-validate"></a>}}
\if{latex}{\out{\hypertarget{method-ShinyModule-validate}{}}}
\subsection{Method \code{validate()}}{
Validator method
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ShinyModule$validate()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
(\code{self})
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ShinyModule-getReactiveValues"></a>}}
\if{latex}{\out{\hypertarget{method-ShinyModule-getReactiveValues}{}}}
\subsection{Method \code{getReactiveValues()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ShinyModule$getReactiveValues(session = getDefaultReactiveDomain())}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{session}}{(\code{session}) Session from the server function.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ShinyModule-UI"></a>}}
\if{latex}{\out{\hypertarget{method-ShinyModule-UI}{}}}
\subsection{Method \code{UI()}}{
Method to include a \link[shiny]{tagList} to include the body.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ShinyModule$UI()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
(\code{tagList})
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ShinyModule-server"></a>}}
\if{latex}{\out{\hypertarget{method-ShinyModule-server}{}}}
\subsection{Method \code{server()}}{
Method to handle the back-end.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ShinyModule$server(input, output, session)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{input}}{(\code{input}) Input from the server function.}

\item{\code{output}}{(\code{output}) Output from the server function.}

\item{\code{session}}{(\code{session}) Session from the server function.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
(\code{NULL})
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ShinyModule-clone"></a>}}
\if{latex}{\out{\hypertarget{method-ShinyModule-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ShinyModule$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
