% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Module.R
\name{Module}
\alias{Module}
\title{Module}
\description{
Module super class. This class is an \code{interface} and is not meant to be
directly used, but to be inherited.
}
\examples{
library(DarwinShinyModules)

MyModule <- R6::R6Class(
  classname = "MyModule",
  inherit = Module,

  public = list(
    UI = function() {
      shiny::tagList(
        shiny::tableOutput(outputId = shiny::NS(private$.appId, private$id("myTable"))),
        shiny::uiOutput(outputId = shiny::NS(private$.appId, private$id("moduleData")))
      )
    },

    server = function(input, output, session) {
      output[[private$id("myTable")]] <- shiny::renderTable({
        head(private$.data)
      })

      output[[private$id("moduleData")]] <- shiny::renderUI({
        shiny::HTML(paste(
          sprintf("App ID: \%s", private$.appId),
          sprintf("Module Name: \%s", private$.moduleName),
          sprintf("Instance ID: \%s", private$.instanceId),
          sprintf("Namespace ID myTable: \%s", private$id("myTable")),
          sprintf("Namespace ID moduleData: \%s", private$id("moduleData")),
          sep = "<br/>"
        ))
      })
    }
  ),

  private = list(
    .data = iris
  ),

  active = list(
    data = function() return(private$.data)
  )
)

myModule <- MyModule$new(appId = "app")

ui <- shiny::fluidPage(
  myModule$UI()
)

server <- function(input, output, session) {
  shiny::moduleServer(id = "app", module = function(input, output, session) {
    myModule$server(input, output, session)
  })
}

if (interactive()) {
  shiny::shinyApp(ui, server)
}
}
\section{Active bindings}{
\if{html}{\out{<div class="r6-active-bindings">}}
\describe{
\item{\code{appId}}{(\code{character(1)}) appId used for namespacing.}

\item{\code{moduleName}}{(\code{character(1)}) Name of the module.}

\item{\code{instanceId}}{(\code{character(1)}) Random ID of 10 capitalized letters.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-Module-new}{\code{Module$new()}}
\item \href{#method-Module-validate}{\code{Module$validate()}}
\item \href{#method-Module-UI}{\code{Module$UI()}}
\item \href{#method-Module-server}{\code{Module$server()}}
\item \href{#method-Module-clone}{\code{Module$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Module-new"></a>}}
\if{latex}{\out{\hypertarget{method-Module-new}{}}}
\subsection{Method \code{new()}}{
Initializer method
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Module$new(appId)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{appId}}{(\code{character(1)})}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
(\code{invisible(self)})
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Module-validate"></a>}}
\if{latex}{\out{\hypertarget{method-Module-validate}{}}}
\subsection{Method \code{validate()}}{
Validator method
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Module$validate()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
(\code{invisible(self)})
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Module-UI"></a>}}
\if{latex}{\out{\hypertarget{method-Module-UI}{}}}
\subsection{Method \code{UI()}}{
Method to include a \link[shiny]{tagList} to include the body.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Module$UI()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
(\code{tagList})
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Module-server"></a>}}
\if{latex}{\out{\hypertarget{method-Module-server}{}}}
\subsection{Method \code{server()}}{
Method to handle the back-end.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Module$server(input, output, session)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{input}}{(\code{input})\cr
Input from the server function.}

\item{\code{output}}{(\code{output})\cr
Output from the server function.}

\item{\code{session}}{(\code{session})\cr
Session from the server function.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
(\code{NULL})
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Module-clone"></a>}}
\if{latex}{\out{\hypertarget{method-Module-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Module$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
