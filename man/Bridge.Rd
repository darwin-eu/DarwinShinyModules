% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Bridge.R
\name{Bridge}
\alias{Bridge}
\title{Bridge Module Class}
\value{
\code{self}
}
\description{
Bridge module that "birdges" multiple modules with bespoke server code.
}
\details{
The Bridge module links two or more modules together with user defined server code.
}
\examples{
library(DarwinShinyModules)

table <- Table$new(data = mtcars)

inputPanel <- InputPanel$new(
  funs = list(
  inputSpecies = shiny::selectInput
  ),
  args = list(
    inputSpecies = list(
      inputId = "inputSpecies",
      label = "Select Species",
      choices = unique(iris$Species),
      selected = unique(iris$Species)[1]
    )
  )
)

bridgeFun <- function(input, output, session) {
  shiny::observeEvent(inputPanel$inputValues$inputSpecies, {
    table$data <- iris \%>\%
      dplyr::filter(.data$Species == inputPanel$inputValues$inputSpecies)
  })
}

bridge <- Bridge$new(inputPanel, table, bridgeFun = bridgeFun)

if (interactive()) {
  preview(bridge)
}
}
\section{Super class}{
\code{\link[DarwinShinyModules:ShinyModule]{DarwinShinyModules::ShinyModule}} -> \code{Bridge}
}
\section{Active bindings}{
\if{html}{\out{<div class="r6-active-bindings">}}
\describe{
\item{\code{modules}}{(\code{list}) List of modules.}

\item{\code{birdgeFun}}{(\code{function}) Function that bridges modules.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-Bridge-new}{\code{Bridge$new()}}
\item \href{#method-Bridge-clone}{\code{Bridge$clone()}}
}
}
\if{html}{\out{
<details open><summary>Inherited methods</summary>
<ul>
<li><span class="pkg-link" data-pkg="DarwinShinyModules" data-topic="ShinyModule" data-id="UI"><a href='../../DarwinShinyModules/html/ShinyModule.html#method-ShinyModule-UI'><code>DarwinShinyModules::ShinyModule$UI()</code></a></span></li>
<li><span class="pkg-link" data-pkg="DarwinShinyModules" data-topic="ShinyModule" data-id="server"><a href='../../DarwinShinyModules/html/ShinyModule.html#method-ShinyModule-server'><code>DarwinShinyModules::ShinyModule$server()</code></a></span></li>
<li><span class="pkg-link" data-pkg="DarwinShinyModules" data-topic="ShinyModule" data-id="validate"><a href='../../DarwinShinyModules/html/ShinyModule.html#method-ShinyModule-validate'><code>DarwinShinyModules::ShinyModule$validate()</code></a></span></li>
</ul>
</details>
}}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Bridge-new"></a>}}
\if{latex}{\out{\hypertarget{method-Bridge-new}{}}}
\subsection{Method \code{new()}}{
Initializer method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Bridge$new(..., bridgeFun = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{(\code{ShinyModule}) ShinyModules to bridge.}

\item{\code{bridgeFun}}{(\code{function}: \code{NULL}) Server function to make the
modules interact with eachother. Should be setup as a shiny server
function that takes \code{input}, \code{output}, and \code{session} as parameters.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Bridge-clone"></a>}}
\if{latex}{\out{\hypertarget{method-Bridge-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Bridge$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
